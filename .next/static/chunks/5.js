(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[5],{

/***/ "./writings/filter-array-in-javascript.md":
/*!************************************************!*\
  !*** ./writings/filter-array-in-javascript.md ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"filter() Array Method with Javascript\\\"\\ndate: \\\"2020-01-09\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nRecently I've found out about filtering array using type guards,\\nsuch as `Number` or `Boolean` and I thought it would be good to\\nwrite a small post about it.\\n\\n<br />\\n\\nI've posted a Tweet about this, which contain a really neat trick in my opinion:\\n\\n<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Get rid of falsy values from an array, pretty neat.<br><br>ðŸ”¥ðŸ”¥<a href=\\\"https://twitter.com/hashtag/js?src=hash&amp;ref_src=twsrc%5Etfw\\\">#js</a> <a href=\\\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\\\">#javascript</a> <a href=\\\"https://twitter.com/hashtag/react?src=hash&amp;ref_src=twsrc%5Etfw\\\">#react</a> <a href=\\\"https://twitter.com/hashtag/reactjs?src=hash&amp;ref_src=twsrc%5Etfw\\\">#reactjs</a> <a href=\\\"https://twitter.com/hashtag/programming?src=hash&amp;ref_src=twsrc%5Etfw\\\">#programming</a> <a href=\\\"https://twitter.com/hashtag/code?src=hash&amp;ref_src=twsrc%5Etfw\\\">#code</a> <a href=\\\"https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;ref_src=twsrc%5Etfw\\\">#100DaysOfCode</a> <a href=\\\"https://twitter.com/hashtag/tip?src=hash&amp;ref_src=twsrc%5Etfw\\\">#tip</a> <a href=\\\"https://twitter.com/hashtag/tips?src=hash&amp;ref_src=twsrc%5Etfw\\\">#tips</a> <a href=\\\"https://twitter.com/hashtag/array?src=hash&amp;ref_src=twsrc%5Etfw\\\">#array</a> <a href=\\\"https://twitter.com/hashtag/mentor?src=hash&amp;ref_src=twsrc%5Etfw\\\">#mentor</a> <a href=\\\"https://twitter.com/hashtag/coding?src=hash&amp;ref_src=twsrc%5Etfw\\\">#coding</a> <a href=\\\"https://t.co/Y43WDmmJYE\\\">pic.twitter.com/Y43WDmmJYE</a></p>&mdash; Telmo Goncalves (@telmo) <a href=\\\"https://twitter.com/telmo/status/1215244075579924480?ref_src=twsrc%5Etfw\\\">January 9, 2020</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\\n\\nLet's do this.\\n\\n---\\n\\n## Type Guards\\n\\nTake the following array example, where we'll have both falsy statements and strings:\\n\\n```js\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n```\\n\\nMy first approach here to filter the falsy statements and returns just the strings would be\\nto go with something like the following:\\n\\n```js:3\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\narr.filter(value => value && value) // [\\\"NextJS\\\", \\\"React\\\"]\\n```\\n\\nWhich is perfectly fine, although there's a more elegant way of doing this:\\n\\n```js:-3,4\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\narr.filter(value => value && value)\\narr.filter(Boolean) // [\\\"NextJS\\\", \\\"React\\\"]\\n```\\n\\nBoth return exactly the same thing, aside from that I went ahead and\\ntested the performance on both methods:\\n\\n```js\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\n// Took 0.030000024707987905 milliseconds to run\\narr.filter(value => value && value)\\n\\n// Took 0.004999979864805937 milliseconds to run\\narr.filter(Boolean)\\n```\\n\\nIt's amazing how faster it is to use `.filter(Boolean)`.\\n\\n---\\n\\n## What about numbers and string?\\n\\nI liked this so much I went ahead and tried filtering numbers and strings, I ran\\na couple of examples, let's start with numbers:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n```\\n\\nWith this example we want to filter the numbers, removing all strings:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n\\narr.filter(Number) // [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n```\\n\\nThis returns exactly the same array, `\\\"4\\\"` and `\\\"6\\\"` are being considered numbers,\\nbecause well, they are numbers. Javascript is a tricky fellow.\\n\\n<br />\\n\\nIf we actually had strings in our array it would work fine:\\n\\n```js:!-1\\nconst arr = [1, 2, 3, \\\"Fancy\\\", 5, \\\"Array\\\"]\\n\\narr.filter(Number) // [1, 2, 3, 5]\\n```\\n\\n<br />\\n\\nThe only way I got to filter numbers, even when numbers are string (`\\\"4\\\"`), was\\nby checking the data type:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n\\narr.filter(value => typeof value === 'number' && value) // [1, 2, 3, 5]\\n```\\n\\n---\\n\\nI thought it was a simple and short post that can probably help someone, and I hope it does. If there's\\nanything else that you think I should write about or you need some help just let me know.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvZmlsdGVyLWFycmF5LWluLWphdmFzY3JpcHQubWQ/YzU1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLHFvQkFBc2tCLDRGQUE0RiwrRkFBK0YsNEZBQTRGLGtHQUFrRywrRkFBK0YsaUdBQWlHLGdHQUFnRyx1RkFBdUYseUZBQXlGLDJGQUEyRiw0RkFBNEYsK0dBQStHLHFnRkFBcWdGIiwiZmlsZSI6Ii4vd3JpdGluZ3MvZmlsdGVyLWFycmF5LWluLWphdmFzY3JpcHQubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIi0tLVxcbnRpdGxlOiBcXFwiZmlsdGVyKCkgQXJyYXkgTWV0aG9kIHdpdGggSmF2YXNjcmlwdFxcXCJcXG5kYXRlOiBcXFwiMjAyMC0wMS0wOVxcXCJcXG5hdXRob3I6XFxuICB0d2l0dGVyOiBcXFwidGVsbW9cXFwiXFxuICBuYW1lOiBcXFwiVGVsbW8gR29uY2FsdmVzXFxcIlxcbi0tLVxcblxcblJlY2VudGx5IEkndmUgZm91bmQgb3V0IGFib3V0IGZpbHRlcmluZyBhcnJheSB1c2luZyB0eXBlIGd1YXJkcyxcXG5zdWNoIGFzIGBOdW1iZXJgIG9yIGBCb29sZWFuYCBhbmQgSSB0aG91Z2h0IGl0IHdvdWxkIGJlIGdvb2QgdG9cXG53cml0ZSBhIHNtYWxsIHBvc3QgYWJvdXQgaXQuXFxuXFxuPGJyIC8+XFxuXFxuSSd2ZSBwb3N0ZWQgYSBUd2VldCBhYm91dCB0aGlzLCB3aGljaCBjb250YWluIGEgcmVhbGx5IG5lYXQgdHJpY2sgaW4gbXkgb3BpbmlvbjpcXG5cXG48YmxvY2txdW90ZSBjbGFzcz1cXFwidHdpdHRlci10d2VldFxcXCI+PHAgbGFuZz1cXFwiZW5cXFwiIGRpcj1cXFwibHRyXFxcIj5HZXQgcmlkIG9mIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LCBwcmV0dHkgbmVhdC48YnI+PGJyPvCflKXwn5SlPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL2pzP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4janM8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9qYXZhc2NyaXB0P3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jamF2YXNjcmlwdDwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL3JlYWN0P3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jcmVhY3Q8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9yZWFjdGpzP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jcmVhY3RqczwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL3Byb2dyYW1taW5nP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jcHJvZ3JhbW1pbmc8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9jb2RlP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jY29kZTwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnLzEwMERheXNPZkNvZGU/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiMxMDBEYXlzT2ZDb2RlPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvdGlwP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jdGlwPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvdGlwcz9zcmM9aGFzaCZhbXA7cmVmX3NyYz10d3NyYyU1RXRmd1xcXCI+I3RpcHM8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9hcnJheT9zcmM9aGFzaCZhbXA7cmVmX3NyYz10d3NyYyU1RXRmd1xcXCI+I2FycmF5PC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvbWVudG9yP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jbWVudG9yPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvY29kaW5nP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jY29kaW5nPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3QuY28vWTQzV0RtbUpZRVxcXCI+cGljLnR3aXR0ZXIuY29tL1k0M1dEbW1KWUU8L2E+PC9wPiZtZGFzaDsgVGVsbW8gR29uY2FsdmVzIChAdGVsbW8pIDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vdGVsbW8vc3RhdHVzLzEyMTUyNDQwNzU1Nzk5MjQ0ODA/cmVmX3NyYz10d3NyYyU1RXRmd1xcXCI+SmFudWFyeSA5LCAyMDIwPC9hPjwvYmxvY2txdW90ZT5cXG48c2NyaXB0IGFzeW5jIHNyYz1cXFwiaHR0cHM6Ly9wbGF0Zm9ybS50d2l0dGVyLmNvbS93aWRnZXRzLmpzXFxcIiBjaGFyc2V0PVxcXCJ1dGYtOFxcXCI+PC9zY3JpcHQ+XFxuXFxuXFxuTGV0J3MgZG8gdGhpcy5cXG5cXG4tLS1cXG5cXG4jIyBUeXBlIEd1YXJkc1xcblxcblRha2UgdGhlIGZvbGxvd2luZyBhcnJheSBleGFtcGxlLCB3aGVyZSB3ZSdsbCBoYXZlIGJvdGggZmFsc3kgc3RhdGVtZW50cyBhbmQgc3RyaW5nczpcXG5cXG5gYGBqc1xcbmNvbnN0IGFyciA9IFtmYWxzZSwgJ05leHRKUycsIHVuZGVmaW5lZCwgJ1JlYWN0JywgbnVsbF1cXG5gYGBcXG5cXG5NeSBmaXJzdCBhcHByb2FjaCBoZXJlIHRvIGZpbHRlciB0aGUgZmFsc3kgc3RhdGVtZW50cyBhbmQgcmV0dXJucyBqdXN0IHRoZSBzdHJpbmdzIHdvdWxkIGJlXFxudG8gZ28gd2l0aCBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nOlxcblxcbmBgYGpzOjNcXG5jb25zdCBhcnIgPSBbZmFsc2UsICdOZXh0SlMnLCB1bmRlZmluZWQsICdSZWFjdCcsIG51bGxdXFxuXFxuYXJyLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAmJiB2YWx1ZSkgLy8gW1xcXCJOZXh0SlNcXFwiLCBcXFwiUmVhY3RcXFwiXVxcbmBgYFxcblxcbldoaWNoIGlzIHBlcmZlY3RseSBmaW5lLCBhbHRob3VnaCB0aGVyZSdzIGEgbW9yZSBlbGVnYW50IHdheSBvZiBkb2luZyB0aGlzOlxcblxcbmBgYGpzOi0zLDRcXG5jb25zdCBhcnIgPSBbZmFsc2UsICdOZXh0SlMnLCB1bmRlZmluZWQsICdSZWFjdCcsIG51bGxdXFxuXFxuYXJyLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAmJiB2YWx1ZSlcXG5hcnIuZmlsdGVyKEJvb2xlYW4pIC8vIFtcXFwiTmV4dEpTXFxcIiwgXFxcIlJlYWN0XFxcIl1cXG5gYGBcXG5cXG5Cb3RoIHJldHVybiBleGFjdGx5IHRoZSBzYW1lIHRoaW5nLCBhc2lkZSBmcm9tIHRoYXQgSSB3ZW50IGFoZWFkIGFuZFxcbnRlc3RlZCB0aGUgcGVyZm9ybWFuY2Ugb24gYm90aCBtZXRob2RzOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyID0gW2ZhbHNlLCAnTmV4dEpTJywgdW5kZWZpbmVkLCAnUmVhY3QnLCBudWxsXVxcblxcbi8vIFRvb2sgMC4wMzAwMDAwMjQ3MDc5ODc5MDUgbWlsbGlzZWNvbmRzIHRvIHJ1blxcbmFyci5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUpXFxuXFxuLy8gVG9vayAwLjAwNDk5OTk3OTg2NDgwNTkzNyBtaWxsaXNlY29uZHMgdG8gcnVuXFxuYXJyLmZpbHRlcihCb29sZWFuKVxcbmBgYFxcblxcbkl0J3MgYW1hemluZyBob3cgZmFzdGVyIGl0IGlzIHRvIHVzZSBgLmZpbHRlcihCb29sZWFuKWAuXFxuXFxuLS0tXFxuXFxuIyMgV2hhdCBhYm91dCBudW1iZXJzIGFuZCBzdHJpbmc/XFxuXFxuSSBsaWtlZCB0aGlzIHNvIG11Y2ggSSB3ZW50IGFoZWFkIGFuZCB0cmllZCBmaWx0ZXJpbmcgbnVtYmVycyBhbmQgc3RyaW5ncywgSSByYW5cXG5hIGNvdXBsZSBvZiBleGFtcGxlcywgbGV0J3Mgc3RhcnQgd2l0aCBudW1iZXJzOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyID0gWzEsIDIsIDMsIFxcXCI0XFxcIiwgNSwgXFxcIjZcXFwiXVxcbmBgYFxcblxcbldpdGggdGhpcyBleGFtcGxlIHdlIHdhbnQgdG8gZmlsdGVyIHRoZSBudW1iZXJzLCByZW1vdmluZyBhbGwgc3RyaW5nczpcXG5cXG5gYGBqc1xcbmNvbnN0IGFyciA9IFsxLCAyLCAzLCBcXFwiNFxcXCIsIDUsIFxcXCI2XFxcIl1cXG5cXG5hcnIuZmlsdGVyKE51bWJlcikgLy8gWzEsIDIsIDMsIFxcXCI0XFxcIiwgNSwgXFxcIjZcXFwiXVxcbmBgYFxcblxcblRoaXMgcmV0dXJucyBleGFjdGx5IHRoZSBzYW1lIGFycmF5LCBgXFxcIjRcXFwiYCBhbmQgYFxcXCI2XFxcImAgYXJlIGJlaW5nIGNvbnNpZGVyZWQgbnVtYmVycyxcXG5iZWNhdXNlIHdlbGwsIHRoZXkgYXJlIG51bWJlcnMuIEphdmFzY3JpcHQgaXMgYSB0cmlja3kgZmVsbG93LlxcblxcbjxiciAvPlxcblxcbklmIHdlIGFjdHVhbGx5IGhhZCBzdHJpbmdzIGluIG91ciBhcnJheSBpdCB3b3VsZCB3b3JrIGZpbmU6XFxuXFxuYGBganM6IS0xXFxuY29uc3QgYXJyID0gWzEsIDIsIDMsIFxcXCJGYW5jeVxcXCIsIDUsIFxcXCJBcnJheVxcXCJdXFxuXFxuYXJyLmZpbHRlcihOdW1iZXIpIC8vIFsxLCAyLCAzLCA1XVxcbmBgYFxcblxcbjxiciAvPlxcblxcblRoZSBvbmx5IHdheSBJIGdvdCB0byBmaWx0ZXIgbnVtYmVycywgZXZlbiB3aGVuIG51bWJlcnMgYXJlIHN0cmluZyAoYFxcXCI0XFxcImApLCB3YXNcXG5ieSBjaGVja2luZyB0aGUgZGF0YSB0eXBlOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyID0gWzEsIDIsIDMsIFxcXCI0XFxcIiwgNSwgXFxcIjZcXFwiXVxcblxcbmFyci5maWx0ZXIodmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSkgLy8gWzEsIDIsIDMsIDVdXFxuYGBgXFxuXFxuLS0tXFxuXFxuSSB0aG91Z2h0IGl0IHdhcyBhIHNpbXBsZSBhbmQgc2hvcnQgcG9zdCB0aGF0IGNhbiBwcm9iYWJseSBoZWxwIHNvbWVvbmUsIGFuZCBJIGhvcGUgaXQgZG9lcy4gSWYgdGhlcmUnc1xcbmFueXRoaW5nIGVsc2UgdGhhdCB5b3UgdGhpbmsgSSBzaG91bGQgd3JpdGUgYWJvdXQgb3IgeW91IG5lZWQgc29tZSBoZWxwIGp1c3QgbGV0IG1lIGtub3cuXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./writings/filter-array-in-javascript.md\n");

/***/ })

}]);