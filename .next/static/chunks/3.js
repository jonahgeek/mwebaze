(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[3],{

/***/ "./writings/dark-mode-enabled.md":
/*!***************************************!*\
  !*** ./writings/dark-mode-enabled.md ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Enabled dark mode with styled-components\\\"\\ndate: \\\"2020-01-08\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nAfter creating this blog, I thought it would be good to be part of all\\nthe **Dark Mode** hype. And since I've never done it, I tried it out.\\n\\n![](https://img.onl/ksEPSi)\\n> Outdated version of my blog\\n\\nSince I'd never really worked with NextJS aside from building this blog,\\nI had to do some research before getting my hands dirty.\\n\\n<br />\\n\\nFor this tutorial, I'll continue using the code from [this post](/writings/nextjs-blog-in-less-than-1-hour),\\nalthough I'll leave the changes for this tutorial in a branch called `dark-mode`.\\n\\n---\\n\\n## All right, let's get started\\n\\nFor this to happen we'll be using `styled-components`, if you're not familiar with it,\\nI would suggest you take a quick look into [their documentation](https://www.styled-components.com/docs/basics#getting-started).\\n\\n<br />\\n\\nIn the root of your projects let us create a `styles` folder and a `themes.js` file:\\n\\n```bash\\nmkdir styles && touch styles/themes.js\\n```\\n\\nAll right, we need a `light` and a `dark` theme, for that we can simply create 2 objects,\\none for each theme:\\n\\n```js\\nexport const lightTheme = {\\n  body: '#FFFFFF',\\n  text: '#363537',\\n}\\n\\nexport const darkTheme = {\\n  body: '#101010',\\n  text: '#FAFAFA',\\n}\\n\\n```\\n\\nDon't worry about this for now, we'll be using it later.\\n\\n<br />\\n\\nWhat I've done was creating a `Layout` wrapper that contains my global styles, theme styles and so forth.\\nBut before that let's define our global styles:\\n\\n```bash\\ntouch styles/global.js\\n```\\n\\nInside `global.js` we'll be using `styled-components`, so let's take care of install it:\\n\\n```bash\\nnpm install styled-components --save\\n```\\n\\n<br />\\n\\nLet's start with something simple such as, background and text color:\\n\\n```js\\nimport { createGlobalStyle } from 'styled-components';\\n\\n// the `theme` object is comming from our ./themes.js file\\nexport const GlobalStyles = createGlobalStyle`\\n  body {\\n    background-color: ${({ theme }) => theme.body};\\n    color: ${({ theme }) => theme.text}\\n  }\\n`\\n```\\n\\n<br />\\n\\nCool, we should be done with this, let's look into implement the themes.\\n\\n---\\n\\n## Layout and Theme Switch\\n\\nI've mentioned that I used a `Layout` wrapper to take care of styles, themes, and so forth. Let's\\ncreate that wrapper:\\n\\n```bash\\nmkdir components && touch components/Layout.js\\n```\\n\\n<br />\\n\\nPaste the following into `Layout.js`:\\n\\n```js\\nimport React from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\n// Default dark mode to true for now\\nconst darkMode = true\\n\\nfunction Layout({ children }) {\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nWe should be ready to wrap our pages with `Layout`, if you look at the codebase\\nI've provided at the beginning of this tutorial you should see a file `/pages/index.js`,\\non that file change the following lines:\\n\\n```js:3,7,9\\nimport React from 'react'\\n\\nimport Layout from '../components/Layout'\\n\\nexport default function Index(props) {\\n  return (\\n    <Layout>\\n      ‚úçÔ∏è My blog about {props.blogCategory}\\n    </Layout>\\n  )\\n}\\n\\nIndex.getInitialProps = () => {\\n  return {\\n    blogCategory: 'ReactJS'\\n  }\\n}\\n```\\n\\nRun the following commands and access your application at `http://localhost:3000`:\\n\\n```bash\\nnpm install && npm run dev\\n```\\n\\nYou should see the background turned dark and the text white ü•≥\\n\\n<br />\\n\\n### Let there be light\\n\\nLet's change the `Layout` wrapper to allow us to switch between dark and light mode. Go\\nto the `components/Layout.js` file and let's make some changes:\\n\\n```js:!-1,-7-8,11-12\\nimport React, { useState } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\n// Default dark mode to true for now\\nconst darkMode = true\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState(true)\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nIf you refresh the page, you should see the same behaviour: dark background, white text.\\n\\n<br />\\n\\nLet's make a quick change to check if our **Light** theme is working as well, change\\nour `darkMode` state from `true` to `false`:\\n\\n```js:!-3\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState(false)\\n\\n  // ...\\n}\\n```\\n\\nRefresh the page; you should see the original theme: white background, dark text üëå\\n\\n<br />\\n\\n#### The Switch\\n\\nWe'll be using the `setDarkMode` method from the previous code, we'll create a\\n`<button>` with an `onClick` prop:\\n\\n```js:14-18\\nimport React, { useState } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState(true)\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <div>\\n        <button onClick={() => setDarkMode(!darkMode)}>\\n          {darkMode ? 'Light it up!' : 'Turn the light off!'}\\n        </button>\\n      </div>\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nSo, what are we doing with `onClick={() => setDarkMode(!darkMode)}`, we're setting\\nthe `darkMode` state by using the `! (not)` operator, which inverts the boolean expression:\\n\\n```js\\nlet darkMode = true\\n\\ndarkMode = !darkMode // false\\ndarkMode = !darkMode // true\\n```\\n\\n---\\n\\n## Persistence\\n\\nYou should notice that every time you refresh your application and theme falls back to the light theme,\\nwell, let's deal with that.\\n\\n<br />\\n\\nFor that we'll take advantage of `localStorage` and React Hooks `useEffect` method. Let's take a look:\\n\\n```js:!-1,11-13\\nimport React, { useState, useEffect } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState(true)\\n\\n  useEffect(() => {\\n    console.log(`Using dark mode? ${darkMode}`)\\n  }, [darkMode]) // Run every time `darkMode` changes\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <div>\\n        <button onClick={() => setDarkMode(!darkMode)}>\\n          {darkMode ? 'Light it up!' : 'Turn the light off!'}\\n        </button>\\n      </div>\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nOpen your developer console, every time you switch between light and dark mode, you should\\nsee logs such as:\\n\\n```text\\nUsing dark mode? false\\nUsing dark mode? true\\nUsing dark mode? false\\n```\\n\\nGreat, that means `useEffect` is working as expected. Although, is you refresh the page\\nit keeps falling back to the light theme.\\n\\n<br />\\n\\nLet's use `localStorage` to fix that:\\n\\n```js:-12,13\\nimport React, { useState, useEffect } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState(true)\\n\\n  useEffect(() => {\\n    console.log(`Using dark mode? ${darkMode}`)\\n    localStorage.setItem('DARK_MODE', darkMode)\\n  }, [darkMode]) // Run every time `darkMode` changes\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <div>\\n        <button onClick={() => setDarkMode(!darkMode)}>\\n          {darkMode ? 'Light it up!' : 'Turn the light off!'}\\n        </button>\\n      </div>\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nYou can check if this is working as expected in the developer tools console,\\nunder **Application ‚Üí Local Storage ‚Üí http://localhost:3000**, you should see:\\n\\n| Key        | Value |\\n| ------------- | ------------- |\\n| `DARK_MODE`      | `true` or `false` |\\n\\n<br />\\n\\nOnce again, on refresh it's still falling back to the light theme, to fix that we\\nneed to make a small change, we need to get the value from `localStorage` and\\nset as our default `darkMode` state:\\n\\n```js:!-9,11-15\\nimport React, { useState, useEffect } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState()\\n\\n  useEffect(() => {\\n    const darkModeValue = localStorage.getItem('DARK_MODE')\\n    // localStorage returns a string, not a boolean\\n    setDarkMode(darkModeValue === 'true')\\n  }, [])\\n\\n  useEffect(() => {\\n    localStorage.setItem('DARK_MODE', darkMode)\\n  }, [darkMode]) // Run every time `darkMode` changes\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <div>\\n         <button onClick={() => setDarkMode(!darkMode)}>\\n          {darkMode ? 'Light it up!' : 'Turn the light off!'}\\n        </button>\\n      </div>\\n\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nWe could have got the `localStorage` value before setting the state, but `localStorage`\\nis still not available because it's not part of NextJS, so this is a nice work-around.\\n\\n---\\n\\n## What the flash?\\n\\nYou might have noticed that when reloading your application while in dark mode,\\nthe page kind of _flashes_ between light and dark mode. Well, we also can use `useEffect`\\nas a good work-around to prevent that, let's set another state ‚Äì `mounted`:\\n\\n```js:6,12-13\\n// ...\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState()\\n  const [mounted, setMounted] = useState(false)\\n\\n  useEffect(() => {\\n    const darkModeValue = localStorage.getItem('DARK_MODE')\\n    // localStorage returns a string, not a boolean\\n    setDarkMode(darkModeValue === 'true')\\n    // Set mounted to `true` only after setting the `darkMode` state\\n    setMounted(true)\\n  }, [])\\n\\n  // ...\\n}\\n```\\n\\nAlright, now we can simply render an empty `<div />` before the component has been mounted,\\nthis will prevent the component to render our styles, `ThemeProvider` etc before we set the\\n`darkMode` state:\\n\\n```js:24\\nimport React, { useState, useEffect } from 'react'\\nimport { ThemeProvider } from 'styled-components'\\n\\nimport { GlobalStyles } from '../styles/global'\\nimport { lightTheme, darkTheme } from '../styles/themes'\\n\\nfunction Layout({ children }) {\\n  // Use the state to determine darkMode\\n  const [darkMode, setDarkMode] = useState()\\n  const [mounted, setMounted] = useState(false)\\n\\n  useEffect(() => {\\n    const darkModeValue = localStorage.getItem('DARK_MODE')\\n    // localStorage returns a string, not a boolean\\n    setDarkMode(darkModeValue === 'true')\\n    // Set mounted to `true` only after setting the `darkMode` state\\n    setMounted(true)\\n  }, [])\\n\\n  useEffect(() => {\\n    localStorage.setItem('DARK_MODE', darkMode)\\n  }, [darkMode]) // Run every time `darkMode` changes\\n\\n  if (!mounted) return <div />\\n\\n  return (\\n    // This will pass `theme` from `ThemeProvider` as a prop into `GlobalStyles`\\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\\n      <div>\\n         <button onClick={() => setDarkMode(!darkMode)}>\\n          {darkMode ? 'Light it up!' : 'Turn the light off!'}\\n        </button>\\n      </div>\\n\\n      <GlobalStyles />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\\nexport default Layout\\n```\\n\\nIf you reload your application, the _flash_ between light and dark mode should be gone.\\n\\n---\\n\\n## Source Code\\n\\nYou can find the source code of this tutorial [here](https://github.com/telmogoncalves/nextjs-markdown-blog),\\ndon't forget it's under the branch `dark-mode`.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./writings/dark-mode-enabled.md\n");

/***/ })

}]);