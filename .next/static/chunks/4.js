(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[4],{

/***/ "./writings/destructure-everything.md":
/*!********************************************!*\
  !*** ./writings/destructure-everything.md ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Destructure Everything\\\"\\ndate: \\\"2020-01-08\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nDestructuring is a convenient way of extracting multiple values\\nfrom data stored in objects and Arrays.\\n\\n---\\n\\nLet's take a look on how to destructure an object:\\n\\n```js\\nconst info = { name: 'Telmo', age: 33, twitterHandler: '@telmo' }\\n\\n// Destructure data from `info`\\nconst { name, age, twitterHandler } = info\\n\\nconsole.log(name, age, twitterHandler) // Telmo 33 @telmo\\n```\\n\\nWhat we've done here? Instead of accessing the data through `info.name`, `info.age`, etc;\\nWe extracted the data from `info`, this way you prevent calling `info.X` multiple times.\\n\\n<br />\\n\\nLet's mock an example where you're making an API call, for this we'll be using\\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/), you can take a look to figure\\nout what it does.\\n\\n<br />\\n\\nA straight forward example is the one provided in the homepage, where we can fetch data\\nfrom [here](https://jsonplaceholder.typicode.com/todos/1) and it should return something like:\\n\\n```json\\n{\\n  \\\"userId\\\": 1,\\n  \\\"id\\\": 1,\\n  \\\"title\\\": \\\"delectus aut autem\\\",\\n  \\\"completed\\\": false\\n}\\n```\\n\\nLet's build a simple component so we can then extract the data from the API call:\\n\\n```js\\nimport React from 'react'\\n\\nexport default function MyComponent() {\\n  return (\\n    <div>My amazing component ðŸš€</div>\\n  )\\n}\\n```\\n\\n<br />\\n\\nGreat, now let's assume the data from the API call is being passed to the component\\nthrough `props`, we can either extract the data before we `return` our component:\\n\\n```js:!-3,4,7-12\\nimport React from 'react'\\n\\nexport default function MyComponent(props) {\\n  const { userId, id, title, completed } = props\\n\\n  return (\\n    <div>\\n      Task ID: {id}\\n      Created by user ID: {userId}\\n      Task title: {title}\\n      Completed: {completed}\\n    </div>\\n  )\\n}\\n```\\n\\nLooks great, but we can still save at least one least in your code, take a look:\\n\\n```js:!-3,-4\\nimport React from 'react'\\n\\nexport default function MyComponent({ userId, id, title, completed }) {\\n  const { userId, id, title, completed } = props\\n\\n  return (\\n    <div>\\n      Task ID: {id}\\n      Created by user ID: {userId}\\n      Task title: {title}\\n      Completed: {completed}\\n    </div>\\n  )\\n}\\n```\\n\\nBy extracting the data directly on `MyComponent()`, we no longer need\\nto extract the data through `const { ... } = props`.\\n\\n---\\n\\n## Let's play without brackets (Arrays)\\n\\nCheck the example bellow and notice the comments:\\n\\n```js\\nconst myTags = ['React', 'Next', 'Gatsby']\\n\\n// Get first element of the array\\nconsole.log(myTags[0]) // React\\n\\n// Destructuring the array\\nconst [tag] = myTags\\n\\nconsole.log(tag) // React\\n```\\n\\nLooks way better.\\n\\n<br />\\n\\nGoing a little further, I found out about this just a few days ago, and it's\\namazing how good the code looks using this. Let's imagine the following data structure:\\n\\n```json\\n\\\"deliveries\\\": [\\n  {\\n    \\\"id\\\": 337948,\\n    \\\"shipments\\\": [\\n      {\\n        \\\"number\\\": \\\"FOO-5905959044\\\",\\n        \\\"products\\\": [\\n          {\\n            \\\"title\\\": \\\"Apple Pie\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"6 Pack Coronas\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"Doritos\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"Burgers\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n]\\n```\\n\\nLet's destructure this sucker using the same component as before,\\nassuming this data is being passed to the component `props`:\\n\\n```js\\n // Destructuring happening right here within `MyComponent()`\\nexport default function MyComponent({\\n  data: { deliveries }\\n}) {\\n  return (\\n    deliveries.map(delivery => {\\n      const {\\n        id,\\n         // Beauty of destructuring arrays\\n        shipments: [shipment]\\n      } = delivery\\n      // Destructuring data from the first array of `shipments`\\n      const { number, products } = shipment\\n\\n      return (\\n        <div>\\n          Order with ID {id} and tracking shipment\\n          number {number}\\n\\n          <ul>\\n            {products.map(({ title }) => ( // Destructuring happening here within `()`\\n              <li>{title}</li>\\n            ))}\\n          </ul>\\n        </div>\\n      )\\n    })\\n  )\\n}\\n```\\n\\nYou can check [this CodeSandbox](https://codesandbox.io/s/infallible-wilbur-xo90i) I've put together.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvZGVzdHJ1Y3R1cmUtZXZlcnl0aGluZy5tZD80NjJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsK1hBQWdVLG1EQUFtRCw0Q0FBNEMsNEJBQTRCLHNLQUFzSyxxZkFBcWYsaUdBQWlHLHlLQUF5Syw0REFBNEQsd1JBQXdSLFdBQVcsK0JBQStCLG1EQUFtRCxHQUFHLDZCQUE2QixPQUFPLHFCQUFxQixNQUFNLG9CQUFvQixVQUFVLG9CQUFvQiw2S0FBNkssK0JBQStCLEdBQUcsV0FBVywrQkFBK0IsbURBQW1ELEdBQUcsNkJBQTZCLE9BQU8scUJBQXFCLE1BQU0sb0JBQW9CLFVBQVUsb0JBQW9CLG9IQUFvSCxNQUFNLDZpQkFBNmlCLG9EQUFvRCwrRUFBK0UsbURBQW1ELGNBQWMsd0RBQXdELGNBQWMsaURBQWlELGNBQWMsaURBQWlELG9CQUFvQixZQUFZLDBQQUEwUCxXQUFXLGFBQWEsR0FBRyxHQUFHLDhDQUE4QyxlQUFlLGlHQUFpRywyRkFBMkYsbUJBQW1CLHVFQUF1RSxHQUFHLDBDQUEwQyxPQUFPLGlDQUFpQyxlQUFlLFFBQVEsdUVBQXVFLE1BQU0sc0JBQXNCLGlEQUFpRCxTQUFTLGlIQUFpSCIsImZpbGUiOiIuL3dyaXRpbmdzL2Rlc3RydWN0dXJlLWV2ZXJ5dGhpbmcubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIi0tLVxcbnRpdGxlOiBcXFwiRGVzdHJ1Y3R1cmUgRXZlcnl0aGluZ1xcXCJcXG5kYXRlOiBcXFwiMjAyMC0wMS0wOFxcXCJcXG5hdXRob3I6XFxuICB0d2l0dGVyOiBcXFwidGVsbW9cXFwiXFxuICBuYW1lOiBcXFwiVGVsbW8gR29uY2FsdmVzXFxcIlxcbi0tLVxcblxcbkRlc3RydWN0dXJpbmcgaXMgYSBjb252ZW5pZW50IHdheSBvZiBleHRyYWN0aW5nIG11bHRpcGxlIHZhbHVlc1xcbmZyb20gZGF0YSBzdG9yZWQgaW4gb2JqZWN0cyBhbmQgQXJyYXlzLlxcblxcbi0tLVxcblxcbkxldCdzIHRha2UgYSBsb29rIG9uIGhvdyB0byBkZXN0cnVjdHVyZSBhbiBvYmplY3Q6XFxuXFxuYGBganNcXG5jb25zdCBpbmZvID0geyBuYW1lOiAnVGVsbW8nLCBhZ2U6IDMzLCB0d2l0dGVySGFuZGxlcjogJ0B0ZWxtbycgfVxcblxcbi8vIERlc3RydWN0dXJlIGRhdGEgZnJvbSBgaW5mb2BcXG5jb25zdCB7IG5hbWUsIGFnZSwgdHdpdHRlckhhbmRsZXIgfSA9IGluZm9cXG5cXG5jb25zb2xlLmxvZyhuYW1lLCBhZ2UsIHR3aXR0ZXJIYW5kbGVyKSAvLyBUZWxtbyAzMyBAdGVsbW9cXG5gYGBcXG5cXG5XaGF0IHdlJ3ZlIGRvbmUgaGVyZT8gSW5zdGVhZCBvZiBhY2Nlc3NpbmcgdGhlIGRhdGEgdGhyb3VnaCBgaW5mby5uYW1lYCwgYGluZm8uYWdlYCwgZXRjO1xcbldlIGV4dHJhY3RlZCB0aGUgZGF0YSBmcm9tIGBpbmZvYCwgdGhpcyB3YXkgeW91IHByZXZlbnQgY2FsbGluZyBgaW5mby5YYCBtdWx0aXBsZSB0aW1lcy5cXG5cXG48YnIgLz5cXG5cXG5MZXQncyBtb2NrIGFuIGV4YW1wbGUgd2hlcmUgeW91J3JlIG1ha2luZyBhbiBBUEkgY2FsbCwgZm9yIHRoaXMgd2UnbGwgYmUgdXNpbmdcXG5bSlNPTlBsYWNlaG9sZGVyXShodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vKSwgeW91IGNhbiB0YWtlIGEgbG9vayB0byBmaWd1cmVcXG5vdXQgd2hhdCBpdCBkb2VzLlxcblxcbjxiciAvPlxcblxcbkEgc3RyYWlnaHQgZm9yd2FyZCBleGFtcGxlIGlzIHRoZSBvbmUgcHJvdmlkZWQgaW4gdGhlIGhvbWVwYWdlLCB3aGVyZSB3ZSBjYW4gZmV0Y2ggZGF0YVxcbmZyb20gW2hlcmVdKGh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2Rvcy8xKSBhbmQgaXQgc2hvdWxkIHJldHVybiBzb21ldGhpbmcgbGlrZTpcXG5cXG5gYGBqc29uXFxue1xcbiAgXFxcInVzZXJJZFxcXCI6IDEsXFxuICBcXFwiaWRcXFwiOiAxLFxcbiAgXFxcInRpdGxlXFxcIjogXFxcImRlbGVjdHVzIGF1dCBhdXRlbVxcXCIsXFxuICBcXFwiY29tcGxldGVkXFxcIjogZmFsc2VcXG59XFxuYGBgXFxuXFxuTGV0J3MgYnVpbGQgYSBzaW1wbGUgY29tcG9uZW50IHNvIHdlIGNhbiB0aGVuIGV4dHJhY3QgdGhlIGRhdGEgZnJvbSB0aGUgQVBJIGNhbGw6XFxuXFxuYGBganNcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlDb21wb25lbnQoKSB7XFxuICByZXR1cm4gKFxcbiAgICA8ZGl2Pk15IGFtYXppbmcgY29tcG9uZW50IPCfmoA8L2Rpdj5cXG4gIClcXG59XFxuYGBgXFxuXFxuPGJyIC8+XFxuXFxuR3JlYXQsIG5vdyBsZXQncyBhc3N1bWUgdGhlIGRhdGEgZnJvbSB0aGUgQVBJIGNhbGwgaXMgYmVpbmcgcGFzc2VkIHRvIHRoZSBjb21wb25lbnRcXG50aHJvdWdoIGBwcm9wc2AsIHdlIGNhbiBlaXRoZXIgZXh0cmFjdCB0aGUgZGF0YSBiZWZvcmUgd2UgYHJldHVybmAgb3VyIGNvbXBvbmVudDpcXG5cXG5gYGBqczohLTMsNCw3LTEyXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE15Q29tcG9uZW50KHByb3BzKSB7XFxuICBjb25zdCB7IHVzZXJJZCwgaWQsIHRpdGxlLCBjb21wbGV0ZWQgfSA9IHByb3BzXFxuXFxuICByZXR1cm4gKFxcbiAgICA8ZGl2PlxcbiAgICAgIFRhc2sgSUQ6IHtpZH1cXG4gICAgICBDcmVhdGVkIGJ5IHVzZXIgSUQ6IHt1c2VySWR9XFxuICAgICAgVGFzayB0aXRsZToge3RpdGxlfVxcbiAgICAgIENvbXBsZXRlZDoge2NvbXBsZXRlZH1cXG4gICAgPC9kaXY+XFxuICApXFxufVxcbmBgYFxcblxcbkxvb2tzIGdyZWF0LCBidXQgd2UgY2FuIHN0aWxsIHNhdmUgYXQgbGVhc3Qgb25lIGxlYXN0IGluIHlvdXIgY29kZSwgdGFrZSBhIGxvb2s6XFxuXFxuYGBganM6IS0zLC00XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE15Q29tcG9uZW50KHsgdXNlcklkLCBpZCwgdGl0bGUsIGNvbXBsZXRlZCB9KSB7XFxuICBjb25zdCB7IHVzZXJJZCwgaWQsIHRpdGxlLCBjb21wbGV0ZWQgfSA9IHByb3BzXFxuXFxuICByZXR1cm4gKFxcbiAgICA8ZGl2PlxcbiAgICAgIFRhc2sgSUQ6IHtpZH1cXG4gICAgICBDcmVhdGVkIGJ5IHVzZXIgSUQ6IHt1c2VySWR9XFxuICAgICAgVGFzayB0aXRsZToge3RpdGxlfVxcbiAgICAgIENvbXBsZXRlZDoge2NvbXBsZXRlZH1cXG4gICAgPC9kaXY+XFxuICApXFxufVxcbmBgYFxcblxcbkJ5IGV4dHJhY3RpbmcgdGhlIGRhdGEgZGlyZWN0bHkgb24gYE15Q29tcG9uZW50KClgLCB3ZSBubyBsb25nZXIgbmVlZFxcbnRvIGV4dHJhY3QgdGhlIGRhdGEgdGhyb3VnaCBgY29uc3QgeyAuLi4gfSA9IHByb3BzYC5cXG5cXG4tLS1cXG5cXG4jIyBMZXQncyBwbGF5IHdpdGhvdXQgYnJhY2tldHMgKEFycmF5cylcXG5cXG5DaGVjayB0aGUgZXhhbXBsZSBiZWxsb3cgYW5kIG5vdGljZSB0aGUgY29tbWVudHM6XFxuXFxuYGBganNcXG5jb25zdCBteVRhZ3MgPSBbJ1JlYWN0JywgJ05leHQnLCAnR2F0c2J5J11cXG5cXG4vLyBHZXQgZmlyc3QgZWxlbWVudCBvZiB0aGUgYXJyYXlcXG5jb25zb2xlLmxvZyhteVRhZ3NbMF0pIC8vIFJlYWN0XFxuXFxuLy8gRGVzdHJ1Y3R1cmluZyB0aGUgYXJyYXlcXG5jb25zdCBbdGFnXSA9IG15VGFnc1xcblxcbmNvbnNvbGUubG9nKHRhZykgLy8gUmVhY3RcXG5gYGBcXG5cXG5Mb29rcyB3YXkgYmV0dGVyLlxcblxcbjxiciAvPlxcblxcbkdvaW5nIGEgbGl0dGxlIGZ1cnRoZXIsIEkgZm91bmQgb3V0IGFib3V0IHRoaXMganVzdCBhIGZldyBkYXlzIGFnbywgYW5kIGl0J3NcXG5hbWF6aW5nIGhvdyBnb29kIHRoZSBjb2RlIGxvb2tzIHVzaW5nIHRoaXMuIExldCdzIGltYWdpbmUgdGhlIGZvbGxvd2luZyBkYXRhIHN0cnVjdHVyZTpcXG5cXG5gYGBqc29uXFxuXFxcImRlbGl2ZXJpZXNcXFwiOiBbXFxuICB7XFxuICAgIFxcXCJpZFxcXCI6IDMzNzk0OCxcXG4gICAgXFxcInNoaXBtZW50c1xcXCI6IFtcXG4gICAgICB7XFxuICAgICAgICBcXFwibnVtYmVyXFxcIjogXFxcIkZPTy01OTA1OTU5MDQ0XFxcIixcXG4gICAgICAgIFxcXCJwcm9kdWN0c1xcXCI6IFtcXG4gICAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJ0aXRsZVxcXCI6IFxcXCJBcHBsZSBQaWVcXFwiXFxuICAgICAgICAgIH0sXFxuICAgICAgICAgIHtcXG4gICAgICAgICAgICBcXFwidGl0bGVcXFwiOiBcXFwiNiBQYWNrIENvcm9uYXNcXFwiXFxuICAgICAgICAgIH0sXFxuICAgICAgICAgIHtcXG4gICAgICAgICAgICBcXFwidGl0bGVcXFwiOiBcXFwiRG9yaXRvc1xcXCJcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJ0aXRsZVxcXCI6IFxcXCJCdXJnZXJzXFxcIlxcbiAgICAgICAgICB9XFxuICAgICAgICBdXFxuICAgICAgfVxcbiAgICBdXFxuICB9XFxuXVxcbmBgYFxcblxcbkxldCdzIGRlc3RydWN0dXJlIHRoaXMgc3Vja2VyIHVzaW5nIHRoZSBzYW1lIGNvbXBvbmVudCBhcyBiZWZvcmUsXFxuYXNzdW1pbmcgdGhpcyBkYXRhIGlzIGJlaW5nIHBhc3NlZCB0byB0aGUgY29tcG9uZW50IGBwcm9wc2A6XFxuXFxuYGBganNcXG4gLy8gRGVzdHJ1Y3R1cmluZyBoYXBwZW5pbmcgcmlnaHQgaGVyZSB3aXRoaW4gYE15Q29tcG9uZW50KClgXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlDb21wb25lbnQoe1xcbiAgZGF0YTogeyBkZWxpdmVyaWVzIH1cXG59KSB7XFxuICByZXR1cm4gKFxcbiAgICBkZWxpdmVyaWVzLm1hcChkZWxpdmVyeSA9PiB7XFxuICAgICAgY29uc3Qge1xcbiAgICAgICAgaWQsXFxuICAgICAgICAgLy8gQmVhdXR5IG9mIGRlc3RydWN0dXJpbmcgYXJyYXlzXFxuICAgICAgICBzaGlwbWVudHM6IFtzaGlwbWVudF1cXG4gICAgICB9ID0gZGVsaXZlcnlcXG4gICAgICAvLyBEZXN0cnVjdHVyaW5nIGRhdGEgZnJvbSB0aGUgZmlyc3QgYXJyYXkgb2YgYHNoaXBtZW50c2BcXG4gICAgICBjb25zdCB7IG51bWJlciwgcHJvZHVjdHMgfSA9IHNoaXBtZW50XFxuXFxuICAgICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXY+XFxuICAgICAgICAgIE9yZGVyIHdpdGggSUQge2lkfSBhbmQgdHJhY2tpbmcgc2hpcG1lbnRcXG4gICAgICAgICAgbnVtYmVyIHtudW1iZXJ9XFxuXFxuICAgICAgICAgIDx1bD5cXG4gICAgICAgICAgICB7cHJvZHVjdHMubWFwKCh7IHRpdGxlIH0pID0+ICggLy8gRGVzdHJ1Y3R1cmluZyBoYXBwZW5pbmcgaGVyZSB3aXRoaW4gYCgpYFxcbiAgICAgICAgICAgICAgPGxpPnt0aXRsZX08L2xpPlxcbiAgICAgICAgICAgICkpfVxcbiAgICAgICAgICA8L3VsPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgKVxcbiAgICB9KVxcbiAgKVxcbn1cXG5gYGBcXG5cXG5Zb3UgY2FuIGNoZWNrIFt0aGlzIENvZGVTYW5kYm94XShodHRwczovL2NvZGVzYW5kYm94LmlvL3MvaW5mYWxsaWJsZS13aWxidXIteG85MGkpIEkndmUgcHV0IHRvZ2V0aGVyLlxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./writings/destructure-everything.md\n");

/***/ })

}]);