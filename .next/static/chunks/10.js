(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[10],{

/***/ "./writings/javascript-performance.md":
/*!********************************************!*\
  !*** ./writings/javascript-performance.md ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Performance Matters\\\"\\ndate: \\\"2020-01-10\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nA few people asked me how I've been testing JavaScript performance timings. I\\nuse a really simple technique. Although this is a short post it might help someone.\\nLet's go!\\n\\n---\\n\\nWe'll be using the example of one of my latest Tweets where I've used the following\\ncode example:\\n\\n```js\\nconst flatUnique = data => [...new Set([].concat(...data))];\\n\\nconst arr = [\\\"ReactJS\\\", [\\\"NextJS\\\", \\\"ReactJS\\\"], [\\\"JavaScript\\\", \\\"ReactJS\\\"], \\\"JavaScript\\\"];\\n\\nconsole.log(flatUnique(arr)); // [\\\"ReactJS\\\", \\\"NextJS\\\", \\\"JavaScript\\\"]\\n```\\n\\n<br />\\n\\nAlright, let's start by using performance, `performance` comes with JavaScript and\\nhas a lot of proto properties, if you open your developer tools console and type `performance`\\nyou can see what I'm talking about. If you're too lazy to do that check this\\n[image](https://img.onl/hU4rdE).\\n\\n<br />\\n\\nFor this scenario we'll be using the `.now()` function, let's take care of that:\\n\\n```js:4\\nconst flatUnique = data => [...new Set([].concat(...data))];\\n\\nconst arr = [\\\"ReactJS\\\", [\\\"NextJS\\\", \\\"ReactJS\\\"], [\\\"JavaScript\\\", \\\"ReactJS\\\"], \\\"JavaScript\\\"];\\nconst start = performance.now();\\n\\nconsole.log(flatUnique(arr)); // [\\\"ReactJS\\\", \\\"NextJS\\\", \\\"JavaScript\\\"]\\n```\\n\\nWhat we're doing here is setting the _current time_, this is pretty much\\nthe same thing as `Date.now()`, right, so we've initialized that, let's move on.\\n\\n<br />\\n\\nThen we're running `console.log` and calling our `flatUnique` function, after that we\\njust need to apply simple math, let's add another code line and cover that:\\n\\n```js:8\\nconst flatUnique = data => [...new Set([].concat(...data))];\\n\\nconst arr = [\\\"ReactJS\\\", [\\\"NextJS\\\", \\\"ReactJS\\\"], [\\\"JavaScript\\\", \\\"ReactJS\\\"], \\\"JavaScript\\\"];\\nconst start = performance.now();\\n\\nconsole.log(flatUnique(arr)); // [\\\"ReactJS\\\", \\\"NextJS\\\", \\\"JavaScript\\\"]\\n\\nconst duration = performance.now() - start;\\n```\\n\\nWe are, once again, using `performance` to initialize `.now()`, but this time we'll\\nsubtract `start`, our initial `performance.now()`, this will return the time it took\\nsince the first `performance.now()` until the second one.\\n\\n<br />\\n\\nNow we just need to output the `duration` value in some way:\\n\\n```js:10\\nconst flatUnique = data => [...new Set([].concat(...data))];\\n\\nconst arr = [\\\"ReactJS\\\", [\\\"NextJS\\\", \\\"ReactJS\\\"], [\\\"JavaScript\\\", \\\"ReactJS\\\"], \\\"JavaScript\\\"];\\nconst start = performance.now();\\n\\nconsole.log(flatUnique(arr)); // [\\\"ReactJS\\\", \\\"NextJS\\\", \\\"JavaScript\\\"]\\n\\nconst duration = performance.now() - start;\\n\\nconsole.log(duration);\\n```\\n\\nI've just ran this test and returned `0.39499999955296516`, it'll differ every\\ntime you run this, but you can have a general idea on how long it'll take to run\\n`flatUnique`.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvamF2YXNjcmlwdC1wZXJmb3JtYW5jZS5tZD84NTRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsK2hCQUFnZSx3R0FBd0csaUNBQWlDLHlnQkFBeWdCLHdHQUF3RyxrQ0FBa0MsaUNBQWlDLHljQUF5Yyx3R0FBd0csa0NBQWtDLGlDQUFpQyw0RkFBNEYsaVlBQWlZLHdHQUF3RyxrQ0FBa0MsaUNBQWlDLDRGQUE0RiwwQkFBMEIsMkxBQTJMIiwiZmlsZSI6Ii4vd3JpdGluZ3MvamF2YXNjcmlwdC1wZXJmb3JtYW5jZS5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiLS0tXFxudGl0bGU6IFxcXCJQZXJmb3JtYW5jZSBNYXR0ZXJzXFxcIlxcbmRhdGU6IFxcXCIyMDIwLTAxLTEwXFxcIlxcbmF1dGhvcjpcXG4gIHR3aXR0ZXI6IFxcXCJ0ZWxtb1xcXCJcXG4gIG5hbWU6IFxcXCJUZWxtbyBHb25jYWx2ZXNcXFwiXFxuLS0tXFxuXFxuQSBmZXcgcGVvcGxlIGFza2VkIG1lIGhvdyBJJ3ZlIGJlZW4gdGVzdGluZyBKYXZhU2NyaXB0IHBlcmZvcm1hbmNlIHRpbWluZ3MuIElcXG51c2UgYSByZWFsbHkgc2ltcGxlIHRlY2huaXF1ZS4gQWx0aG91Z2ggdGhpcyBpcyBhIHNob3J0IHBvc3QgaXQgbWlnaHQgaGVscCBzb21lb25lLlxcbkxldCdzIGdvIVxcblxcbi0tLVxcblxcbldlJ2xsIGJlIHVzaW5nIHRoZSBleGFtcGxlIG9mIG9uZSBvZiBteSBsYXRlc3QgVHdlZXRzIHdoZXJlIEkndmUgdXNlZCB0aGUgZm9sbG93aW5nXFxuY29kZSBleGFtcGxlOlxcblxcbmBgYGpzXFxuY29uc3QgZmxhdFVuaXF1ZSA9IGRhdGEgPT4gWy4uLm5ldyBTZXQoW10uY29uY2F0KC4uLmRhdGEpKV07XFxuXFxuY29uc3QgYXJyID0gW1xcXCJSZWFjdEpTXFxcIiwgW1xcXCJOZXh0SlNcXFwiLCBcXFwiUmVhY3RKU1xcXCJdLCBbXFxcIkphdmFTY3JpcHRcXFwiLCBcXFwiUmVhY3RKU1xcXCJdLCBcXFwiSmF2YVNjcmlwdFxcXCJdO1xcblxcbmNvbnNvbGUubG9nKGZsYXRVbmlxdWUoYXJyKSk7IC8vIFtcXFwiUmVhY3RKU1xcXCIsIFxcXCJOZXh0SlNcXFwiLCBcXFwiSmF2YVNjcmlwdFxcXCJdXFxuYGBgXFxuXFxuPGJyIC8+XFxuXFxuQWxyaWdodCwgbGV0J3Mgc3RhcnQgYnkgdXNpbmcgcGVyZm9ybWFuY2UsIGBwZXJmb3JtYW5jZWAgY29tZXMgd2l0aCBKYXZhU2NyaXB0IGFuZFxcbmhhcyBhIGxvdCBvZiBwcm90byBwcm9wZXJ0aWVzLCBpZiB5b3Ugb3BlbiB5b3VyIGRldmVsb3BlciB0b29scyBjb25zb2xlIGFuZCB0eXBlIGBwZXJmb3JtYW5jZWBcXG55b3UgY2FuIHNlZSB3aGF0IEknbSB0YWxraW5nIGFib3V0LiBJZiB5b3UncmUgdG9vIGxhenkgdG8gZG8gdGhhdCBjaGVjayB0aGlzXFxuW2ltYWdlXShodHRwczovL2ltZy5vbmwvaFU0cmRFKS5cXG5cXG48YnIgLz5cXG5cXG5Gb3IgdGhpcyBzY2VuYXJpbyB3ZSdsbCBiZSB1c2luZyB0aGUgYC5ub3coKWAgZnVuY3Rpb24sIGxldCdzIHRha2UgY2FyZSBvZiB0aGF0OlxcblxcbmBgYGpzOjRcXG5jb25zdCBmbGF0VW5pcXVlID0gZGF0YSA9PiBbLi4ubmV3IFNldChbXS5jb25jYXQoLi4uZGF0YSkpXTtcXG5cXG5jb25zdCBhcnIgPSBbXFxcIlJlYWN0SlNcXFwiLCBbXFxcIk5leHRKU1xcXCIsIFxcXCJSZWFjdEpTXFxcIl0sIFtcXFwiSmF2YVNjcmlwdFxcXCIsIFxcXCJSZWFjdEpTXFxcIl0sIFxcXCJKYXZhU2NyaXB0XFxcIl07XFxuY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcXG5cXG5jb25zb2xlLmxvZyhmbGF0VW5pcXVlKGFycikpOyAvLyBbXFxcIlJlYWN0SlNcXFwiLCBcXFwiTmV4dEpTXFxcIiwgXFxcIkphdmFTY3JpcHRcXFwiXVxcbmBgYFxcblxcbldoYXQgd2UncmUgZG9pbmcgaGVyZSBpcyBzZXR0aW5nIHRoZSBfY3VycmVudCB0aW1lXywgdGhpcyBpcyBwcmV0dHkgbXVjaFxcbnRoZSBzYW1lIHRoaW5nIGFzIGBEYXRlLm5vdygpYCwgcmlnaHQsIHNvIHdlJ3ZlIGluaXRpYWxpemVkIHRoYXQsIGxldCdzIG1vdmUgb24uXFxuXFxuPGJyIC8+XFxuXFxuVGhlbiB3ZSdyZSBydW5uaW5nIGBjb25zb2xlLmxvZ2AgYW5kIGNhbGxpbmcgb3VyIGBmbGF0VW5pcXVlYCBmdW5jdGlvbiwgYWZ0ZXIgdGhhdCB3ZVxcbmp1c3QgbmVlZCB0byBhcHBseSBzaW1wbGUgbWF0aCwgbGV0J3MgYWRkIGFub3RoZXIgY29kZSBsaW5lIGFuZCBjb3ZlciB0aGF0OlxcblxcbmBgYGpzOjhcXG5jb25zdCBmbGF0VW5pcXVlID0gZGF0YSA9PiBbLi4ubmV3IFNldChbXS5jb25jYXQoLi4uZGF0YSkpXTtcXG5cXG5jb25zdCBhcnIgPSBbXFxcIlJlYWN0SlNcXFwiLCBbXFxcIk5leHRKU1xcXCIsIFxcXCJSZWFjdEpTXFxcIl0sIFtcXFwiSmF2YVNjcmlwdFxcXCIsIFxcXCJSZWFjdEpTXFxcIl0sIFxcXCJKYXZhU2NyaXB0XFxcIl07XFxuY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcXG5cXG5jb25zb2xlLmxvZyhmbGF0VW5pcXVlKGFycikpOyAvLyBbXFxcIlJlYWN0SlNcXFwiLCBcXFwiTmV4dEpTXFxcIiwgXFxcIkphdmFTY3JpcHRcXFwiXVxcblxcbmNvbnN0IGR1cmF0aW9uID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydDtcXG5gYGBcXG5cXG5XZSBhcmUsIG9uY2UgYWdhaW4sIHVzaW5nIGBwZXJmb3JtYW5jZWAgdG8gaW5pdGlhbGl6ZSBgLm5vdygpYCwgYnV0IHRoaXMgdGltZSB3ZSdsbFxcbnN1YnRyYWN0IGBzdGFydGAsIG91ciBpbml0aWFsIGBwZXJmb3JtYW5jZS5ub3coKWAsIHRoaXMgd2lsbCByZXR1cm4gdGhlIHRpbWUgaXQgdG9va1xcbnNpbmNlIHRoZSBmaXJzdCBgcGVyZm9ybWFuY2Uubm93KClgIHVudGlsIHRoZSBzZWNvbmQgb25lLlxcblxcbjxiciAvPlxcblxcbk5vdyB3ZSBqdXN0IG5lZWQgdG8gb3V0cHV0IHRoZSBgZHVyYXRpb25gIHZhbHVlIGluIHNvbWUgd2F5OlxcblxcbmBgYGpzOjEwXFxuY29uc3QgZmxhdFVuaXF1ZSA9IGRhdGEgPT4gWy4uLm5ldyBTZXQoW10uY29uY2F0KC4uLmRhdGEpKV07XFxuXFxuY29uc3QgYXJyID0gW1xcXCJSZWFjdEpTXFxcIiwgW1xcXCJOZXh0SlNcXFwiLCBcXFwiUmVhY3RKU1xcXCJdLCBbXFxcIkphdmFTY3JpcHRcXFwiLCBcXFwiUmVhY3RKU1xcXCJdLCBcXFwiSmF2YVNjcmlwdFxcXCJdO1xcbmNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XFxuXFxuY29uc29sZS5sb2coZmxhdFVuaXF1ZShhcnIpKTsgLy8gW1xcXCJSZWFjdEpTXFxcIiwgXFxcIk5leHRKU1xcXCIsIFxcXCJKYXZhU2NyaXB0XFxcIl1cXG5cXG5jb25zdCBkdXJhdGlvbiA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQ7XFxuXFxuY29uc29sZS5sb2coZHVyYXRpb24pO1xcbmBgYFxcblxcbkkndmUganVzdCByYW4gdGhpcyB0ZXN0IGFuZCByZXR1cm5lZCBgMC4zOTQ5OTk5OTk1NTI5NjUxNmAsIGl0J2xsIGRpZmZlciBldmVyeVxcbnRpbWUgeW91IHJ1biB0aGlzLCBidXQgeW91IGNhbiBoYXZlIGEgZ2VuZXJhbCBpZGVhIG9uIGhvdyBsb25nIGl0J2xsIHRha2UgdG8gcnVuXFxuYGZsYXRVbmlxdWVgLlxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./writings/javascript-performance.md\n");

/***/ })

}]);