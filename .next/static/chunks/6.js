(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[6],{

/***/ "./writings/filtering-js-arrays.md":
/*!*****************************************!*\
  !*** ./writings/filtering-js-arrays.md ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Filtering arrays in JavaScript\\\"\\ndate: \\\"2020-04-23\\\"\\nog:\\n  description: \\\"Learn how to use the filter with arrays in JavaScript\\\"\\n  image: \\\"https://telmo.im/og/arrayfilter.png\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nUsing `filter()` in JavaScript can be really handy, you can filter an\\narray in so many ways, lets explore a little bit about that.\\n\\n<br />\\n\\n## Numbers\\n\\nStart with a simple numbers array:\\n\\n```js\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n```\\n\\nNow, lets filter this array in order to return only values below `8`:\\n\\n```js:3-5\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n\\n// We're *saying*, get me all values\\n// that are less less (<) than 8\\narray.filter(value => value < 8);\\n```\\n\\nWith this filter it'll return `[1, 2, 3, 4, 5, 6, 7]`, pretty neat right?\\n\\n<br />\\n\\nLets try a few more examples before moving on. Check the comments on the code:\\n\\n```js\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n\\n// Get only odd numbers\\narray.filter(value => value & 1); // [1, 3, 5, 7, 9]\\n\\n// Get only even numbers\\narray.filter(value => !(value & 1)); // [2, 4, 6, 8, 10]\\n\\n// Get values between `3` and `8`\\narray.filter(value => value > 3 && value < 8); // [4, 5, 6, 7]\\n```\\n\\nAs you can see we can use `filter()` in many ways, lets play\\na little bit with `strings` üôÇ\\n\\n---\\n\\n## Strings\\n\\nAgain, lets set up a simple array:\\n\\n```js\\nconst array = [\\\"@telmo\\\", \\\"https://telmo.im\\\", \\\"Fullstack Developer\\\"]\\n```\\n\\nLets assume we want to filter just URLs, so, we\\ncan filter strings that start with `http` as an example:\\n\\n```js:3\\nconst array = [\\\"@telmo\\\", \\\"https://telmo.im\\\", \\\"Fullstack Developer\\\"];\\n\\narray.filter(value => value.startsWith(\\\"http\\\"));\\n```\\n\\nThis will return `[\\\"https://telmo.im\\\"]`. I love JavaScript!\\n\\nSince we know handlers start with an `@`, we can do exactly the same\\nthing to filter all handlers, lets add a few more entries into our array:\\n\\n```js\\nconst array = [\\n  \\\"Telmo\\\", \\\"@telmo\\\", \\\"@codinghubio\\\", \\\"Coding Hub\\\"\\n]\\n\\narray.filter(value => value.startsWith(\\\"@\\\"));\\n```\\n\\nThis should return `[\\\"@telmo\\\", \\\"@codinghubio\\\"]`, sweet!\\n\\n---\\n\\n## Objects\\n\\nFinally, lets just go through a more complex array, an array\\nof objects, lets assume an array of profiles:\\n\\n```js\\nconst profiles = [\\n  { name: \\\"Telmo\\\", handler: \\\"@telmo\\\", followers: 1000 },\\n  { name: \\\"Catalin\\\", handler: \\\"@catalinmpit\\\", followers: 2000 },\\n  { name: \\\"Marc\\\", handler: \\\"@_marcba\\\", followers: 3000 },\\n];\\n```\\n\\nNow lets try and filter profiles that have more than `1000` followers:\\n\\n```js\\nprofiles.filter(value => value.followers > 1000);\\n```\\n\\nWith this filter you should get:\\n\\n```json\\n[\\n  {\\n    \\\"name\\\": \\\"Catalin\\\",\\n    \\\"handler\\\": \\\"@catalinmpit\\\",\\n    \\\"followers\\\": 2000\\n  },\\n  {\\n    \\\"name\\\": \\\"Marc\\\",\\n    \\\"handler\\\": \\\"@_marcba\\\",\\n    \\\"followers\\\": 3000\\n  }\\n]\\n```\\n\\nIn the filter you can do another thing, which is destructuring the\\n`followers` directly, like this:\\n\\n```js\\nprofiles.filter(({ followers }) => followers > 1000);\\n```\\n\\n---\\n\\nI was about to end this writing now, but... We can still use another\\napproach into how we filter arrays.\\n\\n<br />\\n\\nLets assume we have an array with `numbers` and `strings`, and we\\nwant to filter the array to return just the `strings`, how do we\\ncheck in JavaScript if something is a `string`?\\n\\n```js\\ntypeof something === \\\"string\\\"\\n```\\n\\nRight, lets take the following example:\\n\\n```js\\nconst array = [1, 3, \\\"Telmo\\\", 4, 6, \\\"@telmo\\\"];\\n\\n// We can use the `typeof` directly in the filter\\narray.filter(value => typeof value === \\\"string\\\");\\n```\\n\\nIt should return `[\\\"Telmo\\\", \\\"@telmo\\\"]`, awesome! But, we can\\nrefactor this a little bit, assume you might want to use a function\\nthat checks if *something* is a `string`, lets take a look:\\n\\n```js\\nconst array = [1, 3, \\\"Telmo\\\", 4, 6, \\\"@telmo\\\"];\\n\\nfunction isString(value) {\\n  return typeof value === \\\"string\\\";\\n}\\n\\narray.filter(isString);\\n```\\n\\nThis returns exactly the same `[\\\"Telmo\\\", \\\"@telmo\\\"]`, but look how\\nour `filter()` got much cleaner, and bonus, you can re-use the `isString()`\\nfunction somewhere else.\\n\\n> Note that this is not a **right way** of doing things approach, you should use whatever you think is fits you best.\\n\\n<br />\\n\\nThat's it, hope it helped somehow ‚úåÔ∏è\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvZmlsdGVyaW5nLWpzLWFycmF5cy5tZD8xMDRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb2tCQUFxZ0IsMklBQTJJLDZHQUE2Ryx1T0FBdU8sOERBQThELHFGQUFxRix5R0FBeUcsNmNBQTZjLHNEQUFzRCxvV0FBb1csME9BQTBPLHdEQUF3RCxNQUFNLGdFQUFnRSxNQUFNLHlEQUF5RCxLQUFLLDJJQUEySSw0REFBNEQsOEZBQThGLE1BQU0sdUZBQXVGLDZJQUE2SSxZQUFZLHVCQUF1QixrZEFBa2QsMEdBQTBHLHdRQUF3USw4QkFBOEIsdUNBQXVDLEdBQUcsMkJBQTJCLG1XQUFtVyIsImZpbGUiOiIuL3dyaXRpbmdzL2ZpbHRlcmluZy1qcy1hcnJheXMubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIi0tLVxcbnRpdGxlOiBcXFwiRmlsdGVyaW5nIGFycmF5cyBpbiBKYXZhU2NyaXB0XFxcIlxcbmRhdGU6IFxcXCIyMDIwLTA0LTIzXFxcIlxcbm9nOlxcbiAgZGVzY3JpcHRpb246IFxcXCJMZWFybiBob3cgdG8gdXNlIHRoZSBmaWx0ZXIgd2l0aCBhcnJheXMgaW4gSmF2YVNjcmlwdFxcXCJcXG4gIGltYWdlOiBcXFwiaHR0cHM6Ly90ZWxtby5pbS9vZy9hcnJheWZpbHRlci5wbmdcXFwiXFxuYXV0aG9yOlxcbiAgdHdpdHRlcjogXFxcInRlbG1vXFxcIlxcbiAgbmFtZTogXFxcIlRlbG1vIEdvbmNhbHZlc1xcXCJcXG4tLS1cXG5cXG5Vc2luZyBgZmlsdGVyKClgIGluIEphdmFTY3JpcHQgY2FuIGJlIHJlYWxseSBoYW5keSwgeW91IGNhbiBmaWx0ZXIgYW5cXG5hcnJheSBpbiBzbyBtYW55IHdheXMsIGxldHMgZXhwbG9yZSBhIGxpdHRsZSBiaXQgYWJvdXQgdGhhdC5cXG5cXG48YnIgLz5cXG5cXG4jIyBOdW1iZXJzXFxuXFxuU3RhcnQgd2l0aCBhIHNpbXBsZSBudW1iZXJzIGFycmF5OlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xcbmBgYFxcblxcbk5vdywgbGV0cyBmaWx0ZXIgdGhpcyBhcnJheSBpbiBvcmRlciB0byByZXR1cm4gb25seSB2YWx1ZXMgYmVsb3cgYDhgOlxcblxcbmBgYGpzOjMtNVxcbmNvbnN0IGFycmF5ID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcXG5cXG4vLyBXZSdyZSAqc2F5aW5nKiwgZ2V0IG1lIGFsbCB2YWx1ZXNcXG4vLyB0aGF0IGFyZSBsZXNzIGxlc3MgKDwpIHRoYW4gOFxcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSA8IDgpO1xcbmBgYFxcblxcbldpdGggdGhpcyBmaWx0ZXIgaXQnbGwgcmV0dXJuIGBbMSwgMiwgMywgNCwgNSwgNiwgN11gLCBwcmV0dHkgbmVhdCByaWdodD9cXG5cXG48YnIgLz5cXG5cXG5MZXRzIHRyeSBhIGZldyBtb3JlIGV4YW1wbGVzIGJlZm9yZSBtb3Zpbmcgb24uIENoZWNrIHRoZSBjb21tZW50cyBvbiB0aGUgY29kZTpcXG5cXG5gYGBqc1xcbmNvbnN0IGFycmF5ID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcXG5cXG4vLyBHZXQgb25seSBvZGQgbnVtYmVyc1xcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAmIDEpOyAvLyBbMSwgMywgNSwgNywgOV1cXG5cXG4vLyBHZXQgb25seSBldmVuIG51bWJlcnNcXG5hcnJheS5maWx0ZXIodmFsdWUgPT4gISh2YWx1ZSAmIDEpKTsgLy8gWzIsIDQsIDYsIDgsIDEwXVxcblxcbi8vIEdldCB2YWx1ZXMgYmV0d2VlbiBgM2AgYW5kIGA4YFxcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSA+IDMgJiYgdmFsdWUgPCA4KTsgLy8gWzQsIDUsIDYsIDddXFxuYGBgXFxuXFxuQXMgeW91IGNhbiBzZWUgd2UgY2FuIHVzZSBgZmlsdGVyKClgIGluIG1hbnkgd2F5cywgbGV0cyBwbGF5XFxuYSBsaXR0bGUgYml0IHdpdGggYHN0cmluZ3NgIPCfmYJcXG5cXG4tLS1cXG5cXG4jIyBTdHJpbmdzXFxuXFxuQWdhaW4sIGxldHMgc2V0IHVwIGEgc2ltcGxlIGFycmF5OlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbXFxcIkB0ZWxtb1xcXCIsIFxcXCJodHRwczovL3RlbG1vLmltXFxcIiwgXFxcIkZ1bGxzdGFjayBEZXZlbG9wZXJcXFwiXVxcbmBgYFxcblxcbkxldHMgYXNzdW1lIHdlIHdhbnQgdG8gZmlsdGVyIGp1c3QgVVJMcywgc28sIHdlXFxuY2FuIGZpbHRlciBzdHJpbmdzIHRoYXQgc3RhcnQgd2l0aCBgaHR0cGAgYXMgYW4gZXhhbXBsZTpcXG5cXG5gYGBqczozXFxuY29uc3QgYXJyYXkgPSBbXFxcIkB0ZWxtb1xcXCIsIFxcXCJodHRwczovL3RlbG1vLmltXFxcIiwgXFxcIkZ1bGxzdGFjayBEZXZlbG9wZXJcXFwiXTtcXG5cXG5hcnJheS5maWx0ZXIodmFsdWUgPT4gdmFsdWUuc3RhcnRzV2l0aChcXFwiaHR0cFxcXCIpKTtcXG5gYGBcXG5cXG5UaGlzIHdpbGwgcmV0dXJuIGBbXFxcImh0dHBzOi8vdGVsbW8uaW1cXFwiXWAuIEkgbG92ZSBKYXZhU2NyaXB0IVxcblxcblNpbmNlIHdlIGtub3cgaGFuZGxlcnMgc3RhcnQgd2l0aCBhbiBgQGAsIHdlIGNhbiBkbyBleGFjdGx5IHRoZSBzYW1lXFxudGhpbmcgdG8gZmlsdGVyIGFsbCBoYW5kbGVycywgbGV0cyBhZGQgYSBmZXcgbW9yZSBlbnRyaWVzIGludG8gb3VyIGFycmF5OlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbXFxuICBcXFwiVGVsbW9cXFwiLCBcXFwiQHRlbG1vXFxcIiwgXFxcIkBjb2RpbmdodWJpb1xcXCIsIFxcXCJDb2RpbmcgSHViXFxcIlxcbl1cXG5cXG5hcnJheS5maWx0ZXIodmFsdWUgPT4gdmFsdWUuc3RhcnRzV2l0aChcXFwiQFxcXCIpKTtcXG5gYGBcXG5cXG5UaGlzIHNob3VsZCByZXR1cm4gYFtcXFwiQHRlbG1vXFxcIiwgXFxcIkBjb2RpbmdodWJpb1xcXCJdYCwgc3dlZXQhXFxuXFxuLS0tXFxuXFxuIyMgT2JqZWN0c1xcblxcbkZpbmFsbHksIGxldHMganVzdCBnbyB0aHJvdWdoIGEgbW9yZSBjb21wbGV4IGFycmF5LCBhbiBhcnJheVxcbm9mIG9iamVjdHMsIGxldHMgYXNzdW1lIGFuIGFycmF5IG9mIHByb2ZpbGVzOlxcblxcbmBgYGpzXFxuY29uc3QgcHJvZmlsZXMgPSBbXFxuICB7IG5hbWU6IFxcXCJUZWxtb1xcXCIsIGhhbmRsZXI6IFxcXCJAdGVsbW9cXFwiLCBmb2xsb3dlcnM6IDEwMDAgfSxcXG4gIHsgbmFtZTogXFxcIkNhdGFsaW5cXFwiLCBoYW5kbGVyOiBcXFwiQGNhdGFsaW5tcGl0XFxcIiwgZm9sbG93ZXJzOiAyMDAwIH0sXFxuICB7IG5hbWU6IFxcXCJNYXJjXFxcIiwgaGFuZGxlcjogXFxcIkBfbWFyY2JhXFxcIiwgZm9sbG93ZXJzOiAzMDAwIH0sXFxuXTtcXG5gYGBcXG5cXG5Ob3cgbGV0cyB0cnkgYW5kIGZpbHRlciBwcm9maWxlcyB0aGF0IGhhdmUgbW9yZSB0aGFuIGAxMDAwYCBmb2xsb3dlcnM6XFxuXFxuYGBganNcXG5wcm9maWxlcy5maWx0ZXIodmFsdWUgPT4gdmFsdWUuZm9sbG93ZXJzID4gMTAwMCk7XFxuYGBgXFxuXFxuV2l0aCB0aGlzIGZpbHRlciB5b3Ugc2hvdWxkIGdldDpcXG5cXG5gYGBqc29uXFxuW1xcbiAge1xcbiAgICBcXFwibmFtZVxcXCI6IFxcXCJDYXRhbGluXFxcIixcXG4gICAgXFxcImhhbmRsZXJcXFwiOiBcXFwiQGNhdGFsaW5tcGl0XFxcIixcXG4gICAgXFxcImZvbGxvd2Vyc1xcXCI6IDIwMDBcXG4gIH0sXFxuICB7XFxuICAgIFxcXCJuYW1lXFxcIjogXFxcIk1hcmNcXFwiLFxcbiAgICBcXFwiaGFuZGxlclxcXCI6IFxcXCJAX21hcmNiYVxcXCIsXFxuICAgIFxcXCJmb2xsb3dlcnNcXFwiOiAzMDAwXFxuICB9XFxuXVxcbmBgYFxcblxcbkluIHRoZSBmaWx0ZXIgeW91IGNhbiBkbyBhbm90aGVyIHRoaW5nLCB3aGljaCBpcyBkZXN0cnVjdHVyaW5nIHRoZVxcbmBmb2xsb3dlcnNgIGRpcmVjdGx5LCBsaWtlIHRoaXM6XFxuXFxuYGBganNcXG5wcm9maWxlcy5maWx0ZXIoKHsgZm9sbG93ZXJzIH0pID0+IGZvbGxvd2VycyA+IDEwMDApO1xcbmBgYFxcblxcbi0tLVxcblxcbkkgd2FzIGFib3V0IHRvIGVuZCB0aGlzIHdyaXRpbmcgbm93LCBidXQuLi4gV2UgY2FuIHN0aWxsIHVzZSBhbm90aGVyXFxuYXBwcm9hY2ggaW50byBob3cgd2UgZmlsdGVyIGFycmF5cy5cXG5cXG48YnIgLz5cXG5cXG5MZXRzIGFzc3VtZSB3ZSBoYXZlIGFuIGFycmF5IHdpdGggYG51bWJlcnNgIGFuZCBgc3RyaW5nc2AsIGFuZCB3ZVxcbndhbnQgdG8gZmlsdGVyIHRoZSBhcnJheSB0byByZXR1cm4ganVzdCB0aGUgYHN0cmluZ3NgLCBob3cgZG8gd2VcXG5jaGVjayBpbiBKYXZhU2NyaXB0IGlmIHNvbWV0aGluZyBpcyBhIGBzdHJpbmdgP1xcblxcbmBgYGpzXFxudHlwZW9mIHNvbWV0aGluZyA9PT0gXFxcInN0cmluZ1xcXCJcXG5gYGBcXG5cXG5SaWdodCwgbGV0cyB0YWtlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcXG5cXG5gYGBqc1xcbmNvbnN0IGFycmF5ID0gWzEsIDMsIFxcXCJUZWxtb1xcXCIsIDQsIDYsIFxcXCJAdGVsbW9cXFwiXTtcXG5cXG4vLyBXZSBjYW4gdXNlIHRoZSBgdHlwZW9mYCBkaXJlY3RseSBpbiB0aGUgZmlsdGVyXFxuYXJyYXkuZmlsdGVyKHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gXFxcInN0cmluZ1xcXCIpO1xcbmBgYFxcblxcbkl0IHNob3VsZCByZXR1cm4gYFtcXFwiVGVsbW9cXFwiLCBcXFwiQHRlbG1vXFxcIl1gLCBhd2Vzb21lISBCdXQsIHdlIGNhblxcbnJlZmFjdG9yIHRoaXMgYSBsaXR0bGUgYml0LCBhc3N1bWUgeW91IG1pZ2h0IHdhbnQgdG8gdXNlIGEgZnVuY3Rpb25cXG50aGF0IGNoZWNrcyBpZiAqc29tZXRoaW5nKiBpcyBhIGBzdHJpbmdgLCBsZXRzIHRha2UgYSBsb29rOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbMSwgMywgXFxcIlRlbG1vXFxcIiwgNCwgNiwgXFxcIkB0ZWxtb1xcXCJdO1xcblxcbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XFxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcXFwic3RyaW5nXFxcIjtcXG59XFxuXFxuYXJyYXkuZmlsdGVyKGlzU3RyaW5nKTtcXG5gYGBcXG5cXG5UaGlzIHJldHVybnMgZXhhY3RseSB0aGUgc2FtZSBgW1xcXCJUZWxtb1xcXCIsIFxcXCJAdGVsbW9cXFwiXWAsIGJ1dCBsb29rIGhvd1xcbm91ciBgZmlsdGVyKClgIGdvdCBtdWNoIGNsZWFuZXIsIGFuZCBib251cywgeW91IGNhbiByZS11c2UgdGhlIGBpc1N0cmluZygpYFxcbmZ1bmN0aW9uIHNvbWV3aGVyZSBlbHNlLlxcblxcbj4gTm90ZSB0aGF0IHRoaXMgaXMgbm90IGEgKipyaWdodCB3YXkqKiBvZiBkb2luZyB0aGluZ3MgYXBwcm9hY2gsIHlvdSBzaG91bGQgdXNlIHdoYXRldmVyIHlvdSB0aGluayBpcyBmaXRzIHlvdSBiZXN0LlxcblxcbjxiciAvPlxcblxcblRoYXQncyBpdCwgaG9wZSBpdCBoZWxwZWQgc29tZWhvdyDinIzvuI9cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./writings/filtering-js-arrays.md\n");

/***/ })

}]);