(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[8],{

/***/ "./writings/introduction-to-usestate.md":
/*!**********************************************!*\
  !*** ./writings/introduction-to-usestate.md ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Introduction to useState\\\"\\ndate: \\\"2020-03-05\\\"\\nog:\\n  description: \\\"A quick introduction to ReactJS useState method\\\"\\n  image: \\\"https://telmo.im/og/usestate.png\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nI've been working with React Hooks for some time now and I thought about writing a quick and simple post on how to use `useState`.\\n\\n---\\n\\n# Let us get started\\n\\nFirst of all, we need to import `useState` from `react`\\n\\n```js\\nimport React, { useState } from 'react'\\n```\\n\\nTake into account the following function:\\n\\n```js\\nimport React, { useState } from 'react'\\n\\nfunction Steps() {\\n  return (\\n    <div>\\n      Today I've walked 0 steps.\\n    </div>\\n  )\\n}\\n```\\n\\nAlright, we want to control the amount of steps we've walked today, for that we can use the `useState` method, let us take a look:\\n\\n```js\\nimport React, { useState } from 'react'\\n```\\n\\nTake into account the following function:\\n\\n```js\\nimport React, { useState } from 'react'\\n\\nfunction Steps() {\\n  const [steps] = useState(0)\\n\\n  return (\\n    <div>\\n      Today I've walked {steps} steps.\\n    </div>\\n  )\\n}\\n```\\n\\nWhat are we doing here?\\n\\n- Creating a new state called `steps` and its default value is `0`\\n- We're printing our `steps` value in our function\\n\\n---\\n\\n## Control\\n\\nNow we want to control the value of `steps`, with `useState` you can destructure another prop, so, currently we have `const [steps]`, we will get another method from there, let us change that to `const [steps, setSteps]`.\\n\\n\\nNow we've introduced `setSteps`, with this we can control the value of `steps`, let us create a button to handle an `onClick` function to set the steps to `10`, try it out\\n\\n```js\\nimport React, { useState } from 'react'\\n\\nfunction Steps() {\\n  const [steps, setSteps] = useState(0)\\n  const increaseSteps = () => setSteps(10)\\n\\n  return (\\n    <div>\\n      Today I've walked {steps} steps.\\n\\n      <button onClick={() => increaseSteps()}>\\n        Increase steps\\n      </button>\\n    </div>\\n  )\\n}\\n```\\n\\nWhen you click on our new `button` the steps should increase to `10`, great.\\n\\n---\\n\\n## We can do better\\n\\nWe might want to increase the steps by `1`, not `10`. You might be thinking it's as simple as changing `10` with `1`, give it a try, I'll wait.\\n\\n![](https://media.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif)\\n\\nIt only goes to `1` right? 🤷‍♂️\\n\\nNothing to worry, we'll fix it right now, change the `increaseSteps()` function:\\n\\n```js\\nconst increaseSteps = () => setSteps(steps + 1)\\n```\\n\\nWhat are we doing? We're getting the value of `steps` and increasing it by one.\\n\\nYou can also create another button to decrease the value, similar function but using `-1`:\\n\\n```js\\nconst decreaseSteps = () => setSteps(steps - 1)\\n```\\n\\n---\\n\\n## Result\\n\\nI've spiced things a little bit with styling and an emoji 🙂\\n\\n![](https://img.onl/ivDHCX)\\n\\nYou can check the final code in this [Codesandbox](https://codesandbox.io/s/thirsty-chatelet-76cyl)\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vd3JpdGluZ3MvaW50cm9kdWN0aW9uLXRvLXVzZXN0YXRlLm1kPzNhZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxpakJBQWtmLFdBQVcseUZBQXlGLFdBQVcsbUNBQW1DLDZFQUE2RSxxS0FBcUssV0FBVyx5RkFBeUYsV0FBVyxtQ0FBbUMsbUZBQW1GLE1BQU0sMkJBQTJCLDJsQkFBMmxCLFdBQVcsbUNBQW1DLHlJQUF5SSxNQUFNLGtDQUFrQyxzQkFBc0IsOERBQThELDY4QkFBNjhCIiwiZmlsZSI6Ii4vd3JpdGluZ3MvaW50cm9kdWN0aW9uLXRvLXVzZXN0YXRlLm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCItLS1cXG50aXRsZTogXFxcIkludHJvZHVjdGlvbiB0byB1c2VTdGF0ZVxcXCJcXG5kYXRlOiBcXFwiMjAyMC0wMy0wNVxcXCJcXG5vZzpcXG4gIGRlc2NyaXB0aW9uOiBcXFwiQSBxdWljayBpbnRyb2R1Y3Rpb24gdG8gUmVhY3RKUyB1c2VTdGF0ZSBtZXRob2RcXFwiXFxuICBpbWFnZTogXFxcImh0dHBzOi8vdGVsbW8uaW0vb2cvdXNlc3RhdGUucG5nXFxcIlxcbmF1dGhvcjpcXG4gIHR3aXR0ZXI6IFxcXCJ0ZWxtb1xcXCJcXG4gIG5hbWU6IFxcXCJUZWxtbyBHb25jYWx2ZXNcXFwiXFxuLS0tXFxuXFxuSSd2ZSBiZWVuIHdvcmtpbmcgd2l0aCBSZWFjdCBIb29rcyBmb3Igc29tZSB0aW1lIG5vdyBhbmQgSSB0aG91Z2h0IGFib3V0IHdyaXRpbmcgYSBxdWljayBhbmQgc2ltcGxlIHBvc3Qgb24gaG93IHRvIHVzZSBgdXNlU3RhdGVgLlxcblxcbi0tLVxcblxcbiMgTGV0IHVzIGdldCBzdGFydGVkXFxuXFxuRmlyc3Qgb2YgYWxsLCB3ZSBuZWVkIHRvIGltcG9ydCBgdXNlU3RhdGVgIGZyb20gYHJlYWN0YFxcblxcbmBgYGpzXFxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXFxuYGBgXFxuXFxuVGFrZSBpbnRvIGFjY291bnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbjpcXG5cXG5gYGBqc1xcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xcblxcbmZ1bmN0aW9uIFN0ZXBzKCkge1xcbiAgcmV0dXJuIChcXG4gICAgPGRpdj5cXG4gICAgICBUb2RheSBJJ3ZlIHdhbGtlZCAwIHN0ZXBzLlxcbiAgICA8L2Rpdj5cXG4gIClcXG59XFxuYGBgXFxuXFxuQWxyaWdodCwgd2Ugd2FudCB0byBjb250cm9sIHRoZSBhbW91bnQgb2Ygc3RlcHMgd2UndmUgd2Fsa2VkIHRvZGF5LCBmb3IgdGhhdCB3ZSBjYW4gdXNlIHRoZSBgdXNlU3RhdGVgIG1ldGhvZCwgbGV0IHVzIHRha2UgYSBsb29rOlxcblxcbmBgYGpzXFxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXFxuYGBgXFxuXFxuVGFrZSBpbnRvIGFjY291bnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbjpcXG5cXG5gYGBqc1xcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xcblxcbmZ1bmN0aW9uIFN0ZXBzKCkge1xcbiAgY29uc3QgW3N0ZXBzXSA9IHVzZVN0YXRlKDApXFxuXFxuICByZXR1cm4gKFxcbiAgICA8ZGl2PlxcbiAgICAgIFRvZGF5IEkndmUgd2Fsa2VkIHtzdGVwc30gc3RlcHMuXFxuICAgIDwvZGl2PlxcbiAgKVxcbn1cXG5gYGBcXG5cXG5XaGF0IGFyZSB3ZSBkb2luZyBoZXJlP1xcblxcbi0gQ3JlYXRpbmcgYSBuZXcgc3RhdGUgY2FsbGVkIGBzdGVwc2AgYW5kIGl0cyBkZWZhdWx0IHZhbHVlIGlzIGAwYFxcbi0gV2UncmUgcHJpbnRpbmcgb3VyIGBzdGVwc2AgdmFsdWUgaW4gb3VyIGZ1bmN0aW9uXFxuXFxuLS0tXFxuXFxuIyMgQ29udHJvbFxcblxcbk5vdyB3ZSB3YW50IHRvIGNvbnRyb2wgdGhlIHZhbHVlIG9mIGBzdGVwc2AsIHdpdGggYHVzZVN0YXRlYCB5b3UgY2FuIGRlc3RydWN0dXJlIGFub3RoZXIgcHJvcCwgc28sIGN1cnJlbnRseSB3ZSBoYXZlIGBjb25zdCBbc3RlcHNdYCwgd2Ugd2lsbCBnZXQgYW5vdGhlciBtZXRob2QgZnJvbSB0aGVyZSwgbGV0IHVzIGNoYW5nZSB0aGF0IHRvIGBjb25zdCBbc3RlcHMsIHNldFN0ZXBzXWAuXFxuXFxuXFxuTm93IHdlJ3ZlIGludHJvZHVjZWQgYHNldFN0ZXBzYCwgd2l0aCB0aGlzIHdlIGNhbiBjb250cm9sIHRoZSB2YWx1ZSBvZiBgc3RlcHNgLCBsZXQgdXMgY3JlYXRlIGEgYnV0dG9uIHRvIGhhbmRsZSBhbiBgb25DbGlja2AgZnVuY3Rpb24gdG8gc2V0IHRoZSBzdGVwcyB0byBgMTBgLCB0cnkgaXQgb3V0XFxuXFxuYGBganNcXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcXG5cXG5mdW5jdGlvbiBTdGVwcygpIHtcXG4gIGNvbnN0IFtzdGVwcywgc2V0U3RlcHNdID0gdXNlU3RhdGUoMClcXG4gIGNvbnN0IGluY3JlYXNlU3RlcHMgPSAoKSA9PiBzZXRTdGVwcygxMClcXG5cXG4gIHJldHVybiAoXFxuICAgIDxkaXY+XFxuICAgICAgVG9kYXkgSSd2ZSB3YWxrZWQge3N0ZXBzfSBzdGVwcy5cXG5cXG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGluY3JlYXNlU3RlcHMoKX0+XFxuICAgICAgICBJbmNyZWFzZSBzdGVwc1xcbiAgICAgIDwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gIClcXG59XFxuYGBgXFxuXFxuV2hlbiB5b3UgY2xpY2sgb24gb3VyIG5ldyBgYnV0dG9uYCB0aGUgc3RlcHMgc2hvdWxkIGluY3JlYXNlIHRvIGAxMGAsIGdyZWF0Llxcblxcbi0tLVxcblxcbiMjIFdlIGNhbiBkbyBiZXR0ZXJcXG5cXG5XZSBtaWdodCB3YW50IHRvIGluY3JlYXNlIHRoZSBzdGVwcyBieSBgMWAsIG5vdCBgMTBgLiBZb3UgbWlnaHQgYmUgdGhpbmtpbmcgaXQncyBhcyBzaW1wbGUgYXMgY2hhbmdpbmcgYDEwYCB3aXRoIGAxYCwgZ2l2ZSBpdCBhIHRyeSwgSSdsbCB3YWl0LlxcblxcbiFbXShodHRwczovL21lZGlhLmdpcGh5LmNvbS9tZWRpYS9RQmQya0xCNXFEbXlzRVhyZTkvZ2lwaHkuZ2lmKVxcblxcbkl0IG9ubHkgZ29lcyB0byBgMWAgcmlnaHQ/IPCfpLfigI3imYLvuI9cXG5cXG5Ob3RoaW5nIHRvIHdvcnJ5LCB3ZSdsbCBmaXggaXQgcmlnaHQgbm93LCBjaGFuZ2UgdGhlIGBpbmNyZWFzZVN0ZXBzKClgIGZ1bmN0aW9uOlxcblxcbmBgYGpzXFxuY29uc3QgaW5jcmVhc2VTdGVwcyA9ICgpID0+IHNldFN0ZXBzKHN0ZXBzICsgMSlcXG5gYGBcXG5cXG5XaGF0IGFyZSB3ZSBkb2luZz8gV2UncmUgZ2V0dGluZyB0aGUgdmFsdWUgb2YgYHN0ZXBzYCBhbmQgaW5jcmVhc2luZyBpdCBieSBvbmUuXFxuXFxuWW91IGNhbiBhbHNvIGNyZWF0ZSBhbm90aGVyIGJ1dHRvbiB0byBkZWNyZWFzZSB0aGUgdmFsdWUsIHNpbWlsYXIgZnVuY3Rpb24gYnV0IHVzaW5nIGAtMWA6XFxuXFxuYGBganNcXG5jb25zdCBkZWNyZWFzZVN0ZXBzID0gKCkgPT4gc2V0U3RlcHMoc3RlcHMgLSAxKVxcbmBgYFxcblxcbi0tLVxcblxcbiMjIFJlc3VsdFxcblxcbkkndmUgc3BpY2VkIHRoaW5ncyBhIGxpdHRsZSBiaXQgd2l0aCBzdHlsaW5nIGFuZCBhbiBlbW9qaSDwn5mCXFxuXFxuIVtdKGh0dHBzOi8vaW1nLm9ubC9pdkRIQ1gpXFxuXFxuWW91IGNhbiBjaGVjayB0aGUgZmluYWwgY29kZSBpbiB0aGlzIFtDb2Rlc2FuZGJveF0oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3RoaXJzdHktY2hhdGVsZXQtNzZjeWwpXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./writings/introduction-to-usestate.md\n");

/***/ })

}]);