exports.ids = [5];
exports.modules = {

/***/ "./writings/filtering-js-arrays.md":
/*!*****************************************!*\
  !*** ./writings/filtering-js-arrays.md ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Filtering arrays in JavaScript\\\"\\ndate: \\\"2020-04-23\\\"\\nog:\\n  description: \\\"Learn how to use the filter with arrays in JavaScript\\\"\\n  image: \\\"https://telmo.im/og/arrayfilter.png\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nUsing `filter()` in JavaScript can be really handy, you can filter an\\narray in so many ways, lets explore a little bit about that.\\n\\n<br />\\n\\n## Numbers\\n\\nStart with a simple numbers array:\\n\\n```js\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n```\\n\\nNow, lets filter this array in order to return only values below `8`:\\n\\n```js:3-5\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n\\n// We're *saying*, get me all values\\n// that are less less (<) than 8\\narray.filter(value => value < 8);\\n```\\n\\nWith this filter it'll return `[1, 2, 3, 4, 5, 6, 7]`, pretty neat right?\\n\\n<br />\\n\\nLets try a few more examples before moving on. Check the comments on the code:\\n\\n```js\\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\n\\n// Get only odd numbers\\narray.filter(value => value & 1); // [1, 3, 5, 7, 9]\\n\\n// Get only even numbers\\narray.filter(value => !(value & 1)); // [2, 4, 6, 8, 10]\\n\\n// Get values between `3` and `8`\\narray.filter(value => value > 3 && value < 8); // [4, 5, 6, 7]\\n```\\n\\nAs you can see we can use `filter()` in many ways, lets play\\na little bit with `strings` üôÇ\\n\\n---\\n\\n## Strings\\n\\nAgain, lets set up a simple array:\\n\\n```js\\nconst array = [\\\"@telmo\\\", \\\"https://telmo.im\\\", \\\"Fullstack Developer\\\"]\\n```\\n\\nLets assume we want to filter just URLs, so, we\\ncan filter strings that start with `http` as an example:\\n\\n```js:3\\nconst array = [\\\"@telmo\\\", \\\"https://telmo.im\\\", \\\"Fullstack Developer\\\"];\\n\\narray.filter(value => value.startsWith(\\\"http\\\"));\\n```\\n\\nThis will return `[\\\"https://telmo.im\\\"]`. I love JavaScript!\\n\\nSince we know handlers start with an `@`, we can do exactly the same\\nthing to filter all handlers, lets add a few more entries into our array:\\n\\n```js\\nconst array = [\\n  \\\"Telmo\\\", \\\"@telmo\\\", \\\"@codinghubio\\\", \\\"Coding Hub\\\"\\n]\\n\\narray.filter(value => value.startsWith(\\\"@\\\"));\\n```\\n\\nThis should return `[\\\"@telmo\\\", \\\"@codinghubio\\\"]`, sweet!\\n\\n---\\n\\n## Objects\\n\\nFinally, lets just go through a more complex array, an array\\nof objects, lets assume an array of profiles:\\n\\n```js\\nconst profiles = [\\n  { name: \\\"Telmo\\\", handler: \\\"@telmo\\\", followers: 1000 },\\n  { name: \\\"Catalin\\\", handler: \\\"@catalinmpit\\\", followers: 2000 },\\n  { name: \\\"Marc\\\", handler: \\\"@_marcba\\\", followers: 3000 },\\n];\\n```\\n\\nNow lets try and filter profiles that have more than `1000` followers:\\n\\n```js\\nprofiles.filter(value => value.followers > 1000);\\n```\\n\\nWith this filter you should get:\\n\\n```json\\n[\\n  {\\n    \\\"name\\\": \\\"Catalin\\\",\\n    \\\"handler\\\": \\\"@catalinmpit\\\",\\n    \\\"followers\\\": 2000\\n  },\\n  {\\n    \\\"name\\\": \\\"Marc\\\",\\n    \\\"handler\\\": \\\"@_marcba\\\",\\n    \\\"followers\\\": 3000\\n  }\\n]\\n```\\n\\nIn the filter you can do another thing, which is destructuring the\\n`followers` directly, like this:\\n\\n```js\\nprofiles.filter(({ followers }) => followers > 1000);\\n```\\n\\n---\\n\\nI was about to end this writing now, but... We can still use another\\napproach into how we filter arrays.\\n\\n<br />\\n\\nLets assume we have an array with `numbers` and `strings`, and we\\nwant to filter the array to return just the `strings`, how do we\\ncheck in JavaScript if something is a `string`?\\n\\n```js\\ntypeof something === \\\"string\\\"\\n```\\n\\nRight, lets take the following example:\\n\\n```js\\nconst array = [1, 3, \\\"Telmo\\\", 4, 6, \\\"@telmo\\\"];\\n\\n// We can use the `typeof` directly in the filter\\narray.filter(value => typeof value === \\\"string\\\");\\n```\\n\\nIt should return `[\\\"Telmo\\\", \\\"@telmo\\\"]`, awesome! But, we can\\nrefactor this a little bit, assume you might want to use a function\\nthat checks if *something* is a `string`, lets take a look:\\n\\n```js\\nconst array = [1, 3, \\\"Telmo\\\", 4, 6, \\\"@telmo\\\"];\\n\\nfunction isString(value) {\\n  return typeof value === \\\"string\\\";\\n}\\n\\narray.filter(isString);\\n```\\n\\nThis returns exactly the same `[\\\"Telmo\\\", \\\"@telmo\\\"]`, but look how\\nour `filter()` got much cleaner, and bonus, you can re-use the `isString()`\\nfunction somewhere else.\\n\\n> Note that this is not a **right way** of doing things approach, you should use whatever you think is fits you best.\\n\\n<br />\\n\\nThat's it, hope it helped somehow ‚úåÔ∏è\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93cml0aW5ncy9maWx0ZXJpbmctanMtYXJyYXlzLm1kPzEwNGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxva0JBQXFnQiwySUFBMkksNkdBQTZHLHVPQUF1Tyw4REFBOEQscUZBQXFGLHlHQUF5Ryw2Y0FBNmMsc0RBQXNELG9XQUFvVywwT0FBME8sd0RBQXdELE1BQU0sZ0VBQWdFLE1BQU0seURBQXlELEtBQUssMklBQTJJLDREQUE0RCw4RkFBOEYsTUFBTSx1RkFBdUYsNklBQTZJLFlBQVksdUJBQXVCLGtkQUFrZCwwR0FBMEcsd1FBQXdRLDhCQUE4Qix1Q0FBdUMsR0FBRywyQkFBMkIsbVdBQW1XIiwiZmlsZSI6Ii4vd3JpdGluZ3MvZmlsdGVyaW5nLWpzLWFycmF5cy5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiLS0tXFxudGl0bGU6IFxcXCJGaWx0ZXJpbmcgYXJyYXlzIGluIEphdmFTY3JpcHRcXFwiXFxuZGF0ZTogXFxcIjIwMjAtMDQtMjNcXFwiXFxub2c6XFxuICBkZXNjcmlwdGlvbjogXFxcIkxlYXJuIGhvdyB0byB1c2UgdGhlIGZpbHRlciB3aXRoIGFycmF5cyBpbiBKYXZhU2NyaXB0XFxcIlxcbiAgaW1hZ2U6IFxcXCJodHRwczovL3RlbG1vLmltL29nL2FycmF5ZmlsdGVyLnBuZ1xcXCJcXG5hdXRob3I6XFxuICB0d2l0dGVyOiBcXFwidGVsbW9cXFwiXFxuICBuYW1lOiBcXFwiVGVsbW8gR29uY2FsdmVzXFxcIlxcbi0tLVxcblxcblVzaW5nIGBmaWx0ZXIoKWAgaW4gSmF2YVNjcmlwdCBjYW4gYmUgcmVhbGx5IGhhbmR5LCB5b3UgY2FuIGZpbHRlciBhblxcbmFycmF5IGluIHNvIG1hbnkgd2F5cywgbGV0cyBleHBsb3JlIGEgbGl0dGxlIGJpdCBhYm91dCB0aGF0LlxcblxcbjxiciAvPlxcblxcbiMjIE51bWJlcnNcXG5cXG5TdGFydCB3aXRoIGEgc2ltcGxlIG51bWJlcnMgYXJyYXk6XFxuXFxuYGBganNcXG5jb25zdCBhcnJheSA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XFxuYGBgXFxuXFxuTm93LCBsZXRzIGZpbHRlciB0aGlzIGFycmF5IGluIG9yZGVyIHRvIHJldHVybiBvbmx5IHZhbHVlcyBiZWxvdyBgOGA6XFxuXFxuYGBganM6My01XFxuY29uc3QgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xcblxcbi8vIFdlJ3JlICpzYXlpbmcqLCBnZXQgbWUgYWxsIHZhbHVlc1xcbi8vIHRoYXQgYXJlIGxlc3MgbGVzcyAoPCkgdGhhbiA4XFxuYXJyYXkuZmlsdGVyKHZhbHVlID0+IHZhbHVlIDwgOCk7XFxuYGBgXFxuXFxuV2l0aCB0aGlzIGZpbHRlciBpdCdsbCByZXR1cm4gYFsxLCAyLCAzLCA0LCA1LCA2LCA3XWAsIHByZXR0eSBuZWF0IHJpZ2h0P1xcblxcbjxiciAvPlxcblxcbkxldHMgdHJ5IGEgZmV3IG1vcmUgZXhhbXBsZXMgYmVmb3JlIG1vdmluZyBvbi4gQ2hlY2sgdGhlIGNvbW1lbnRzIG9uIHRoZSBjb2RlOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xcblxcbi8vIEdldCBvbmx5IG9kZCBudW1iZXJzXFxuYXJyYXkuZmlsdGVyKHZhbHVlID0+IHZhbHVlICYgMSk7IC8vIFsxLCAzLCA1LCA3LCA5XVxcblxcbi8vIEdldCBvbmx5IGV2ZW4gbnVtYmVyc1xcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiAhKHZhbHVlICYgMSkpOyAvLyBbMiwgNCwgNiwgOCwgMTBdXFxuXFxuLy8gR2V0IHZhbHVlcyBiZXR3ZWVuIGAzYCBhbmQgYDhgXFxuYXJyYXkuZmlsdGVyKHZhbHVlID0+IHZhbHVlID4gMyAmJiB2YWx1ZSA8IDgpOyAvLyBbNCwgNSwgNiwgN11cXG5gYGBcXG5cXG5BcyB5b3UgY2FuIHNlZSB3ZSBjYW4gdXNlIGBmaWx0ZXIoKWAgaW4gbWFueSB3YXlzLCBsZXRzIHBsYXlcXG5hIGxpdHRsZSBiaXQgd2l0aCBgc3RyaW5nc2Ag8J+Zglxcblxcbi0tLVxcblxcbiMjIFN0cmluZ3NcXG5cXG5BZ2FpbiwgbGV0cyBzZXQgdXAgYSBzaW1wbGUgYXJyYXk6XFxuXFxuYGBganNcXG5jb25zdCBhcnJheSA9IFtcXFwiQHRlbG1vXFxcIiwgXFxcImh0dHBzOi8vdGVsbW8uaW1cXFwiLCBcXFwiRnVsbHN0YWNrIERldmVsb3BlclxcXCJdXFxuYGBgXFxuXFxuTGV0cyBhc3N1bWUgd2Ugd2FudCB0byBmaWx0ZXIganVzdCBVUkxzLCBzbywgd2VcXG5jYW4gZmlsdGVyIHN0cmluZ3MgdGhhdCBzdGFydCB3aXRoIGBodHRwYCBhcyBhbiBleGFtcGxlOlxcblxcbmBgYGpzOjNcXG5jb25zdCBhcnJheSA9IFtcXFwiQHRlbG1vXFxcIiwgXFxcImh0dHBzOi8vdGVsbW8uaW1cXFwiLCBcXFwiRnVsbHN0YWNrIERldmVsb3BlclxcXCJdO1xcblxcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiB2YWx1ZS5zdGFydHNXaXRoKFxcXCJodHRwXFxcIikpO1xcbmBgYFxcblxcblRoaXMgd2lsbCByZXR1cm4gYFtcXFwiaHR0cHM6Ly90ZWxtby5pbVxcXCJdYC4gSSBsb3ZlIEphdmFTY3JpcHQhXFxuXFxuU2luY2Ugd2Uga25vdyBoYW5kbGVycyBzdGFydCB3aXRoIGFuIGBAYCwgd2UgY2FuIGRvIGV4YWN0bHkgdGhlIHNhbWVcXG50aGluZyB0byBmaWx0ZXIgYWxsIGhhbmRsZXJzLCBsZXRzIGFkZCBhIGZldyBtb3JlIGVudHJpZXMgaW50byBvdXIgYXJyYXk6XFxuXFxuYGBganNcXG5jb25zdCBhcnJheSA9IFtcXG4gIFxcXCJUZWxtb1xcXCIsIFxcXCJAdGVsbW9cXFwiLCBcXFwiQGNvZGluZ2h1YmlvXFxcIiwgXFxcIkNvZGluZyBIdWJcXFwiXFxuXVxcblxcbmFycmF5LmZpbHRlcih2YWx1ZSA9PiB2YWx1ZS5zdGFydHNXaXRoKFxcXCJAXFxcIikpO1xcbmBgYFxcblxcblRoaXMgc2hvdWxkIHJldHVybiBgW1xcXCJAdGVsbW9cXFwiLCBcXFwiQGNvZGluZ2h1YmlvXFxcIl1gLCBzd2VldCFcXG5cXG4tLS1cXG5cXG4jIyBPYmplY3RzXFxuXFxuRmluYWxseSwgbGV0cyBqdXN0IGdvIHRocm91Z2ggYSBtb3JlIGNvbXBsZXggYXJyYXksIGFuIGFycmF5XFxub2Ygb2JqZWN0cywgbGV0cyBhc3N1bWUgYW4gYXJyYXkgb2YgcHJvZmlsZXM6XFxuXFxuYGBganNcXG5jb25zdCBwcm9maWxlcyA9IFtcXG4gIHsgbmFtZTogXFxcIlRlbG1vXFxcIiwgaGFuZGxlcjogXFxcIkB0ZWxtb1xcXCIsIGZvbGxvd2VyczogMTAwMCB9LFxcbiAgeyBuYW1lOiBcXFwiQ2F0YWxpblxcXCIsIGhhbmRsZXI6IFxcXCJAY2F0YWxpbm1waXRcXFwiLCBmb2xsb3dlcnM6IDIwMDAgfSxcXG4gIHsgbmFtZTogXFxcIk1hcmNcXFwiLCBoYW5kbGVyOiBcXFwiQF9tYXJjYmFcXFwiLCBmb2xsb3dlcnM6IDMwMDAgfSxcXG5dO1xcbmBgYFxcblxcbk5vdyBsZXRzIHRyeSBhbmQgZmlsdGVyIHByb2ZpbGVzIHRoYXQgaGF2ZSBtb3JlIHRoYW4gYDEwMDBgIGZvbGxvd2VyczpcXG5cXG5gYGBqc1xcbnByb2ZpbGVzLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZS5mb2xsb3dlcnMgPiAxMDAwKTtcXG5gYGBcXG5cXG5XaXRoIHRoaXMgZmlsdGVyIHlvdSBzaG91bGQgZ2V0OlxcblxcbmBgYGpzb25cXG5bXFxuICB7XFxuICAgIFxcXCJuYW1lXFxcIjogXFxcIkNhdGFsaW5cXFwiLFxcbiAgICBcXFwiaGFuZGxlclxcXCI6IFxcXCJAY2F0YWxpbm1waXRcXFwiLFxcbiAgICBcXFwiZm9sbG93ZXJzXFxcIjogMjAwMFxcbiAgfSxcXG4gIHtcXG4gICAgXFxcIm5hbWVcXFwiOiBcXFwiTWFyY1xcXCIsXFxuICAgIFxcXCJoYW5kbGVyXFxcIjogXFxcIkBfbWFyY2JhXFxcIixcXG4gICAgXFxcImZvbGxvd2Vyc1xcXCI6IDMwMDBcXG4gIH1cXG5dXFxuYGBgXFxuXFxuSW4gdGhlIGZpbHRlciB5b3UgY2FuIGRvIGFub3RoZXIgdGhpbmcsIHdoaWNoIGlzIGRlc3RydWN0dXJpbmcgdGhlXFxuYGZvbGxvd2Vyc2AgZGlyZWN0bHksIGxpa2UgdGhpczpcXG5cXG5gYGBqc1xcbnByb2ZpbGVzLmZpbHRlcigoeyBmb2xsb3dlcnMgfSkgPT4gZm9sbG93ZXJzID4gMTAwMCk7XFxuYGBgXFxuXFxuLS0tXFxuXFxuSSB3YXMgYWJvdXQgdG8gZW5kIHRoaXMgd3JpdGluZyBub3csIGJ1dC4uLiBXZSBjYW4gc3RpbGwgdXNlIGFub3RoZXJcXG5hcHByb2FjaCBpbnRvIGhvdyB3ZSBmaWx0ZXIgYXJyYXlzLlxcblxcbjxiciAvPlxcblxcbkxldHMgYXNzdW1lIHdlIGhhdmUgYW4gYXJyYXkgd2l0aCBgbnVtYmVyc2AgYW5kIGBzdHJpbmdzYCwgYW5kIHdlXFxud2FudCB0byBmaWx0ZXIgdGhlIGFycmF5IHRvIHJldHVybiBqdXN0IHRoZSBgc3RyaW5nc2AsIGhvdyBkbyB3ZVxcbmNoZWNrIGluIEphdmFTY3JpcHQgaWYgc29tZXRoaW5nIGlzIGEgYHN0cmluZ2A/XFxuXFxuYGBganNcXG50eXBlb2Ygc29tZXRoaW5nID09PSBcXFwic3RyaW5nXFxcIlxcbmBgYFxcblxcblJpZ2h0LCBsZXRzIHRha2UgdGhlIGZvbGxvd2luZyBleGFtcGxlOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyYXkgPSBbMSwgMywgXFxcIlRlbG1vXFxcIiwgNCwgNiwgXFxcIkB0ZWxtb1xcXCJdO1xcblxcbi8vIFdlIGNhbiB1c2UgdGhlIGB0eXBlb2ZgIGRpcmVjdGx5IGluIHRoZSBmaWx0ZXJcXG5hcnJheS5maWx0ZXIodmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSBcXFwic3RyaW5nXFxcIik7XFxuYGBgXFxuXFxuSXQgc2hvdWxkIHJldHVybiBgW1xcXCJUZWxtb1xcXCIsIFxcXCJAdGVsbW9cXFwiXWAsIGF3ZXNvbWUhIEJ1dCwgd2UgY2FuXFxucmVmYWN0b3IgdGhpcyBhIGxpdHRsZSBiaXQsIGFzc3VtZSB5b3UgbWlnaHQgd2FudCB0byB1c2UgYSBmdW5jdGlvblxcbnRoYXQgY2hlY2tzIGlmICpzb21ldGhpbmcqIGlzIGEgYHN0cmluZ2AsIGxldHMgdGFrZSBhIGxvb2s6XFxuXFxuYGBganNcXG5jb25zdCBhcnJheSA9IFsxLCAzLCBcXFwiVGVsbW9cXFwiLCA0LCA2LCBcXFwiQHRlbG1vXFxcIl07XFxuXFxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFxcXCJzdHJpbmdcXFwiO1xcbn1cXG5cXG5hcnJheS5maWx0ZXIoaXNTdHJpbmcpO1xcbmBgYFxcblxcblRoaXMgcmV0dXJucyBleGFjdGx5IHRoZSBzYW1lIGBbXFxcIlRlbG1vXFxcIiwgXFxcIkB0ZWxtb1xcXCJdYCwgYnV0IGxvb2sgaG93XFxub3VyIGBmaWx0ZXIoKWAgZ290IG11Y2ggY2xlYW5lciwgYW5kIGJvbnVzLCB5b3UgY2FuIHJlLXVzZSB0aGUgYGlzU3RyaW5nKClgXFxuZnVuY3Rpb24gc29tZXdoZXJlIGVsc2UuXFxuXFxuPiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgYSAqKnJpZ2h0IHdheSoqIG9mIGRvaW5nIHRoaW5ncyBhcHByb2FjaCwgeW91IHNob3VsZCB1c2Ugd2hhdGV2ZXIgeW91IHRoaW5rIGlzIGZpdHMgeW91IGJlc3QuXFxuXFxuPGJyIC8+XFxuXFxuVGhhdCdzIGl0LCBob3BlIGl0IGhlbHBlZCBzb21laG93IOKcjO+4j1xcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./writings/filtering-js-arrays.md\n");

/***/ })

};;