exports.ids = [0];
exports.modules = {

/***/ "./writings/associative-array.md":
/*!***************************************!*\
  !*** ./writings/associative-array.md ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Associative array\\\"\\ndate: \\\"2020-09-21\\\"\\nog:\\n  description: \\\"Use associative array to clean up your code.\\\"\\n  image: \\\"https://telmo.im/og/too-many-states.png\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nAs the months pass by the more I know about React, in this article I just want to go through a *trick* I use when a component starts to get a little confusing with conditionals. Let us take a look at a simple dummy few functions to run a `console.log`:\\n\\n```javascript\\nfunction start() {\\n  console.log(\\\"Starting...\\\");\\n}\\n\\nfunction pause() {\\n  console.log(\\\"Pausing...\\\");\\n}\\n\\nfunction stop() {\\n  console.log(\\\"Stopping!\\\");\\n}\\n```\\n\\nAlright, if we call each function we should get a console log with the respective content:\\n\\n```js\\nstart(); // Starting...\\npause(); // Pausing...\\nstop(); // Stopping!\\n```\\n\\nLooking good!\\n\\n> These are simple functions, if you're writing complex functions I don't advice using what we're about to use in this article.\\n\\n---\\n\\n# Array array array\\n\\nSince these are simple functions we can use an array to use the functions instead of having individual functions, such as:\\n\\n```js\\nconst actions = {\\n  start: () => console.log(\\\"Starting...\\\"),\\n  pause: () => console.log(\\\"Pausing...\\\"),\\n  stop: () => console.log(\\\"Stopping!\\\")\\n}\\n```\\n\\nNow we can call it by using:\\n\\n```js\\nactions[\\\"pause\\\"](); // Pausing...\\n```\\n\\nWe still go a little further and make sure our action names are always the same by creating an object with it:\\n\\n```js\\nconst actionNames = {\\n  START: \\\"start\\\",\\n  PAUSE: \\\"pause\\\",\\n  STOP: \\\"stop\\\"\\n}\\n```\\n\\nLet us change our `actions` array to make sure it reflects with our brand new `actionNames`:\\n\\n```js\\nconst actions = {\\n  [actionNames.START]: () => console.log(\\\"Starting...\\\"),\\n  [actionNames.PAUSE]: () => console.log(\\\"Pausing...\\\"),\\n  [actionNames.STOP]: () => console.log(\\\"Stopping!\\\")\\n}\\n```\\n\\nNow instead of calling `actions[\\\"stop\\\"]();` we can use our `actionNames`:\\n\\n```js\\nactions[actionNames.STOP](); // Stopping!\\n```\\n\\n---\\n\\n# Without functions\\n\\nLet me give you one more examples, say we want to display an online presence, it can either be **online**, **offline** or away, both content and background should change, we can also use an associative array to accomplish that, take a look:\\n\\n```js\\nconst status = {\\n  ONLINE: {\\n    background: \\\"#09ded8\\\",\\n    title: \\\"User is online ðŸŽ‰\\\"\\n  },\\n  OFFLINE: {\\n    background: \\\"#fe564c\\\",\\n    title: \\\"Oh bummer, user is offline ðŸ˜”\\\"\\n  },\\n  AWAY: {\\n    background: \\\"#fac82b\\\",\\n    title: \\\"User is away, should be right back ðŸ‘€\\\"\\n  }\\n}\\n```\\n\\nAs an example if you call `status[\\\"ONLINE\\\"]` you'll get the following in return:\\n\\n```js\\n{\\n  background: \\\"#09ded8\\\",\\n  title: \\\"User is online ðŸŽ‰\\\"\\n}\\n```\\n\\nThat's it! You can play around with the code [here](https://codesandbox.io/s/silly-dhawan-c5qpz?file=/src/index.js)\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93cml0aW5ncy9hc3NvY2lhdGl2ZS1hcnJheS5tZD9jODcyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUseWxCQUEwaEIsaUNBQWlDLEdBQUcsc0JBQXNCLGdDQUFnQyxHQUFHLHFCQUFxQiwrQkFBK0IsR0FBRyxzSEFBc0gseUJBQXlCLHVCQUF1Qiw4VkFBOFYsd0lBQXdJLHFFQUFxRSxxS0FBcUssK0RBQStELGlJQUFpSSxrTEFBa0wscURBQXFELHNFQUFzRSwrVEFBK1QsYUFBYSxxRUFBcUUsZUFBZSxpRkFBaUYsWUFBWSx5RkFBeUYsR0FBRyx1R0FBdUcsK0RBQStELCtIQUErSCIsImZpbGUiOiIuL3dyaXRpbmdzL2Fzc29jaWF0aXZlLWFycmF5Lm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCItLS1cXG50aXRsZTogXFxcIkFzc29jaWF0aXZlIGFycmF5XFxcIlxcbmRhdGU6IFxcXCIyMDIwLTA5LTIxXFxcIlxcbm9nOlxcbiAgZGVzY3JpcHRpb246IFxcXCJVc2UgYXNzb2NpYXRpdmUgYXJyYXkgdG8gY2xlYW4gdXAgeW91ciBjb2RlLlxcXCJcXG4gIGltYWdlOiBcXFwiaHR0cHM6Ly90ZWxtby5pbS9vZy90b28tbWFueS1zdGF0ZXMucG5nXFxcIlxcbmF1dGhvcjpcXG4gIHR3aXR0ZXI6IFxcXCJ0ZWxtb1xcXCJcXG4gIG5hbWU6IFxcXCJUZWxtbyBHb25jYWx2ZXNcXFwiXFxuLS0tXFxuXFxuQXMgdGhlIG1vbnRocyBwYXNzIGJ5IHRoZSBtb3JlIEkga25vdyBhYm91dCBSZWFjdCwgaW4gdGhpcyBhcnRpY2xlIEkganVzdCB3YW50IHRvIGdvIHRocm91Z2ggYSAqdHJpY2sqIEkgdXNlIHdoZW4gYSBjb21wb25lbnQgc3RhcnRzIHRvIGdldCBhIGxpdHRsZSBjb25mdXNpbmcgd2l0aCBjb25kaXRpb25hbHMuIExldCB1cyB0YWtlIGEgbG9vayBhdCBhIHNpbXBsZSBkdW1teSBmZXcgZnVuY3Rpb25zIHRvIHJ1biBhIGBjb25zb2xlLmxvZ2A6XFxuXFxuYGBgamF2YXNjcmlwdFxcbmZ1bmN0aW9uIHN0YXJ0KCkge1xcbiAgY29uc29sZS5sb2coXFxcIlN0YXJ0aW5nLi4uXFxcIik7XFxufVxcblxcbmZ1bmN0aW9uIHBhdXNlKCkge1xcbiAgY29uc29sZS5sb2coXFxcIlBhdXNpbmcuLi5cXFwiKTtcXG59XFxuXFxuZnVuY3Rpb24gc3RvcCgpIHtcXG4gIGNvbnNvbGUubG9nKFxcXCJTdG9wcGluZyFcXFwiKTtcXG59XFxuYGBgXFxuXFxuQWxyaWdodCwgaWYgd2UgY2FsbCBlYWNoIGZ1bmN0aW9uIHdlIHNob3VsZCBnZXQgYSBjb25zb2xlIGxvZyB3aXRoIHRoZSByZXNwZWN0aXZlIGNvbnRlbnQ6XFxuXFxuYGBganNcXG5zdGFydCgpOyAvLyBTdGFydGluZy4uLlxcbnBhdXNlKCk7IC8vIFBhdXNpbmcuLi5cXG5zdG9wKCk7IC8vIFN0b3BwaW5nIVxcbmBgYFxcblxcbkxvb2tpbmcgZ29vZCFcXG5cXG4+IFRoZXNlIGFyZSBzaW1wbGUgZnVuY3Rpb25zLCBpZiB5b3UncmUgd3JpdGluZyBjb21wbGV4IGZ1bmN0aW9ucyBJIGRvbid0IGFkdmljZSB1c2luZyB3aGF0IHdlJ3JlIGFib3V0IHRvIHVzZSBpbiB0aGlzIGFydGljbGUuXFxuXFxuLS0tXFxuXFxuIyBBcnJheSBhcnJheSBhcnJheVxcblxcblNpbmNlIHRoZXNlIGFyZSBzaW1wbGUgZnVuY3Rpb25zIHdlIGNhbiB1c2UgYW4gYXJyYXkgdG8gdXNlIHRoZSBmdW5jdGlvbnMgaW5zdGVhZCBvZiBoYXZpbmcgaW5kaXZpZHVhbCBmdW5jdGlvbnMsIHN1Y2ggYXM6XFxuXFxuYGBganNcXG5jb25zdCBhY3Rpb25zID0ge1xcbiAgc3RhcnQ6ICgpID0+IGNvbnNvbGUubG9nKFxcXCJTdGFydGluZy4uLlxcXCIpLFxcbiAgcGF1c2U6ICgpID0+IGNvbnNvbGUubG9nKFxcXCJQYXVzaW5nLi4uXFxcIiksXFxuICBzdG9wOiAoKSA9PiBjb25zb2xlLmxvZyhcXFwiU3RvcHBpbmchXFxcIilcXG59XFxuYGBgXFxuXFxuTm93IHdlIGNhbiBjYWxsIGl0IGJ5IHVzaW5nOlxcblxcbmBgYGpzXFxuYWN0aW9uc1tcXFwicGF1c2VcXFwiXSgpOyAvLyBQYXVzaW5nLi4uXFxuYGBgXFxuXFxuV2Ugc3RpbGwgZ28gYSBsaXR0bGUgZnVydGhlciBhbmQgbWFrZSBzdXJlIG91ciBhY3Rpb24gbmFtZXMgYXJlIGFsd2F5cyB0aGUgc2FtZSBieSBjcmVhdGluZyBhbiBvYmplY3Qgd2l0aCBpdDpcXG5cXG5gYGBqc1xcbmNvbnN0IGFjdGlvbk5hbWVzID0ge1xcbiAgU1RBUlQ6IFxcXCJzdGFydFxcXCIsXFxuICBQQVVTRTogXFxcInBhdXNlXFxcIixcXG4gIFNUT1A6IFxcXCJzdG9wXFxcIlxcbn1cXG5gYGBcXG5cXG5MZXQgdXMgY2hhbmdlIG91ciBgYWN0aW9uc2AgYXJyYXkgdG8gbWFrZSBzdXJlIGl0IHJlZmxlY3RzIHdpdGggb3VyIGJyYW5kIG5ldyBgYWN0aW9uTmFtZXNgOlxcblxcbmBgYGpzXFxuY29uc3QgYWN0aW9ucyA9IHtcXG4gIFthY3Rpb25OYW1lcy5TVEFSVF06ICgpID0+IGNvbnNvbGUubG9nKFxcXCJTdGFydGluZy4uLlxcXCIpLFxcbiAgW2FjdGlvbk5hbWVzLlBBVVNFXTogKCkgPT4gY29uc29sZS5sb2coXFxcIlBhdXNpbmcuLi5cXFwiKSxcXG4gIFthY3Rpb25OYW1lcy5TVE9QXTogKCkgPT4gY29uc29sZS5sb2coXFxcIlN0b3BwaW5nIVxcXCIpXFxufVxcbmBgYFxcblxcbk5vdyBpbnN0ZWFkIG9mIGNhbGxpbmcgYGFjdGlvbnNbXFxcInN0b3BcXFwiXSgpO2Agd2UgY2FuIHVzZSBvdXIgYGFjdGlvbk5hbWVzYDpcXG5cXG5gYGBqc1xcbmFjdGlvbnNbYWN0aW9uTmFtZXMuU1RPUF0oKTsgLy8gU3RvcHBpbmchXFxuYGBgXFxuXFxuLS0tXFxuXFxuIyBXaXRob3V0IGZ1bmN0aW9uc1xcblxcbkxldCBtZSBnaXZlIHlvdSBvbmUgbW9yZSBleGFtcGxlcywgc2F5IHdlIHdhbnQgdG8gZGlzcGxheSBhbiBvbmxpbmUgcHJlc2VuY2UsIGl0IGNhbiBlaXRoZXIgYmUgKipvbmxpbmUqKiwgKipvZmZsaW5lKiogb3IgYXdheSwgYm90aCBjb250ZW50IGFuZCBiYWNrZ3JvdW5kIHNob3VsZCBjaGFuZ2UsIHdlIGNhbiBhbHNvIHVzZSBhbiBhc3NvY2lhdGl2ZSBhcnJheSB0byBhY2NvbXBsaXNoIHRoYXQsIHRha2UgYSBsb29rOlxcblxcbmBgYGpzXFxuY29uc3Qgc3RhdHVzID0ge1xcbiAgT05MSU5FOiB7XFxuICAgIGJhY2tncm91bmQ6IFxcXCIjMDlkZWQ4XFxcIixcXG4gICAgdGl0bGU6IFxcXCJVc2VyIGlzIG9ubGluZSDwn46JXFxcIlxcbiAgfSxcXG4gIE9GRkxJTkU6IHtcXG4gICAgYmFja2dyb3VuZDogXFxcIiNmZTU2NGNcXFwiLFxcbiAgICB0aXRsZTogXFxcIk9oIGJ1bW1lciwgdXNlciBpcyBvZmZsaW5lIPCfmJRcXFwiXFxuICB9LFxcbiAgQVdBWToge1xcbiAgICBiYWNrZ3JvdW5kOiBcXFwiI2ZhYzgyYlxcXCIsXFxuICAgIHRpdGxlOiBcXFwiVXNlciBpcyBhd2F5LCBzaG91bGQgYmUgcmlnaHQgYmFjayDwn5GAXFxcIlxcbiAgfVxcbn1cXG5gYGBcXG5cXG5BcyBhbiBleGFtcGxlIGlmIHlvdSBjYWxsIGBzdGF0dXNbXFxcIk9OTElORVxcXCJdYCB5b3UnbGwgZ2V0IHRoZSBmb2xsb3dpbmcgaW4gcmV0dXJuOlxcblxcbmBgYGpzXFxue1xcbiAgYmFja2dyb3VuZDogXFxcIiMwOWRlZDhcXFwiLFxcbiAgdGl0bGU6IFxcXCJVc2VyIGlzIG9ubGluZSDwn46JXFxcIlxcbn1cXG5gYGBcXG5cXG5UaGF0J3MgaXQhIFlvdSBjYW4gcGxheSBhcm91bmQgd2l0aCB0aGUgY29kZSBbaGVyZV0oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3NpbGx5LWRoYXdhbi1jNXFwej9maWxlPS9zcmMvaW5kZXguanMpXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./writings/associative-array.md\n");

/***/ })

};;