exports.ids = [11];
exports.modules = {

/***/ "./writings/nextjs-blog-in-less-than-1-hour.md":
/*!*****************************************************!*\
  !*** ./writings/nextjs-blog-in-less-than-1-hour.md ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Build a Next.js blog with markdown\\\"\\ndate: \\\"2020-01-07\\\"\\nog:\\n  description: \\\"How I've build this blog in less than an hour\\\"\\n  image: \\\"https://telmo.im/og/nextjs.png\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nI've posted a Tweet about building this blog in less than an hour,\\nand I'll be honest; it took me more time writing this post than\\nactually putting this blog online.\\n\\n<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Less than 1 hour. I&#39;ve used NextJS for the first time and it&#39;s pretty amazing. And it goes without saying I&#39;ve used <a href=\\\"https://twitter.com/zeithq?ref_src=twsrc%5Etfw\\\">@zeithq</a> for the hosting üî•<br><br>I might keep it updated, just wanted to check how long would take me to get a blog up and running.<a href=\\\"https://t.co/XsFjLYP7MU\\\">https://t.co/XsFjLYP7MU</a></p>&mdash; Telmo Goncalves (@telmo) <a href=\\\"https://twitter.com/telmo/status/1214257221829312518?ref_src=twsrc%5Etfw\\\">January 6, 2020</a></blockquote> <script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\\nI'll try to explain the steps I took.\\n\\n> If you don't want to follow the tutorial download the [Source code](https://github.com/telmogoncalves/nextjs-markdown-blog).\\n\\n---\\n\\nI've decided to go ahead and create a personal page/blog for\\nmyself, and since I'm a massive fan of [Zeit and Now](http://zeit.co/),\\nthat meant no time wasted thinking about hosting and deployments.\\n\\nI have a few projects running with using [GatsbyJS](https://www.gatsbyjs.org/),\\nand to be honest, I love it, it's easy to use, and really powerful\\nif you plug a third-party such as [Contentful](https://www.contentful.com/).\\nAlthough this time, I wanted to try something different, and since I love hosting\\nand deploy my projects with Zeit, why not give [NextJS](https://nextjs.org/)\\na try? First time using it, and let me tell you it's freaking amazing.\\n\\n---\\n\\n## Let's get started\\n\\nRun the following:\\n\\n```bash\\nmkdir my-blog && cd my-blog\\n```\\n\\n```bash\\nnpm init -y && npm install react react-dom next --save\\n```\\n\\n> If you're wondering `-y` means you don't have to answer all the `npm init` questions\\n\\nNow, in your `package.json` file replace `scripts` with:\\n\\n```json\\n\\\"scripts\\\": {\\n  \\\"dev\\\": \\\"next\\\",\\n  \\\"build\\\": \\\"next build\\\",\\n  \\\"start\\\": \\\"next start\\\"\\n}\\n```\\n\\nIf you go ahead and try to start the server `npm run dev`, it should throw an error, because NextJS\\nis expecting to find a `/pages` folder.\\n\\n<br />\\n\\nSo, let us take care of that, in the root of your project run:\\n\\n```bash\\nmkdir pages && touch pages/index.js\\n```\\n\\nNow you should be able to run `npm run dev` and access your application on `http://localhost:3000`\\n\\n<br />\\n\\nIf everything is going as expected you should see an error similar to the following:\\n\\n```text\\nThe default export is not a React Component in page: \\\"/\\\"\\n```\\n\\nThat's alright; keep going.\\n\\n---\\n\\n## Our first view\\n\\nIn your `pages/index.js` file, paste the following code:\\n\\n```js\\nimport React from 'react'\\n\\nexport default function Index() {\\n  return (\\n    <div>\\n      ‚úçÔ∏è My blog about Books\\n    </div>\\n  )\\n}\\n```\\n\\nCheck `http://localhost:3000` you should see **My blog about Books**\\n\\n#### Getting props\\n\\nNextJS comes with a function called `getInitialProps`; we can pass props into our `Index` component.\\n\\n<br />\\n\\nLet us start with something simpler; at the end of your component lets put the following code:\\n\\n```js:11-15\\nimport React from 'react'\\n\\nexport default function Index() {\\n  return (\\n    <div>\\n      ‚úçÔ∏è My blog about Books\\n    </div>\\n  )\\n}\\n\\nIndex.getInitialProps = () => {\\n  return {\\n    blogCategory: 'Books'\\n  }\\n}\\n```\\n\\nHere we're passing a `blogCategory` prop into our component, go ahead and change your component to look like the following:\\n\\n```js:6\\nimport React from 'react'\\n\\nexport default function Index(props) {\\n  return (\\n    <div>\\n      ‚úçÔ∏è My blog about {props.blogCategory}\\n    </div>\\n  )\\n}\\n\\n// ...\\n```\\n\\nIf you refresh the page, it should look exactly the same, although, if you change the value\\nof `blogCategory` you'll see that it changes your view with the new value. Give it a try:\\n\\n```js:5\\n// ...\\n\\nIndex.getInitialProps = () => {\\n  return {\\n    blogCategory: 'ReactJS'\\n  }\\n}\\n```\\n\\nThe content of your view should now be: **‚úçÔ∏è My blog about ReactJS**\\n\\n<br />\\n\\nAwesome, next!\\n\\n---\\n\\n## Dynamic Routes\\n\\nSo, to build a blog, you want dynamic routes, according to the route we want to load a\\ndifferent `.md` file, which will contain our post data.\\n\\n<br />\\n\\nIf you access `http://localhost:3000/post/hello-world` we'll want to load a file\\ncalled `hello-world.md`, for that to happen let us follow the next steps:\\n\\n<br />\\n\\nFirst of all, NextJS is clever enough to allow us to create a `[slug].js` file, which\\nis pretty awesome, let's go ahead and create that file:\\n\\n```bash\\nmkdir pages/post\\n```\\n\\n> Note the folder and file needs to be created inside `/pages`\\n\\nNow create a file inside `/post` called `[slug].js`, it's exactly like that, with the brackets.\\n\\nInside this file we'll create our post template, to display the post title, contents, etc.\\n\\n<br />\\n\\nGo ahead and paste the following code, we'll go over it in a minute:\\n\\n```js\\nimport React from 'react'\\n\\nexport default function PostTemplate(props) {\\n  return (\\n    <div>\\n      Here we'll load \\\"{props.slug}\\\"\\n    </div>\\n  )\\n}\\n\\nPostTemplate.getInitialProps = async (context) => {\\n  const { slug } = context.query\\n\\n  return { slug }\\n}\\n```\\n\\nIn here we're accessing `context.query` to extract the `slug` from the URL, this is because\\nwe called our file `[slug].js`, let's say instead of a blog post you want to display a\\nproduct page, that might contain an id, you can create a file called `[id].js` instead and\\naccess `context.query.id`.\\n\\n<br />\\n\\nIf you access `http://localhost:3000/post/hello-world` you should see **Here we'll load \\\"hello-world\\\"**\\n\\nBrilliant, let's keep going!\\n\\n---\\n\\n## Loading Markdown Files\\n\\nAs a first step lets create a `.md` file:\\n\\n```bash\\nmkdir content && touch content/hello-world.md\\n```\\n\\nIn the `hello-world.md` file paste the following:\\n\\n```\\n---\\ntitle: \\\"Hello World\\\"\\ndate: \\\"2020-01-07\\\"\\n---\\n\\nThis is my first blog post!\\n```\\n\\nThat's great; now we need to load the content of this file and pass it through `props` in\\nour `PostTemplate` file.\\n\\n<br />\\n\\nCheck the comments on the changed lines:\\n\\n```js:13-14\\nimport React from 'react'\\n\\nexport default function PostTemplate(props) {\\n  return (\\n    <div>\\n      Here we'll load \\\"{props.slug}\\\"\\n    </div>\\n  )\\n}\\n\\nPostTemplate.getInitialProps = async (context) => {\\n  const { slug } = context.query\\n  // Import our .md file using the `slug` from the URL\\n  const content = import(`../../content/${slug}.md`)\\n\\n  return { slug }\\n}\\n```\\n\\nNow that we have the data, we'll be using [gray-matter](https://www.npmjs.com/package/gray-matter)\\nto parse our file `frontmatter` data.\\n\\n> `frontmatter` data is the information between `---` in our `.md` file\\n\\nTo install `gray-matter` run:\\n\\n```bash\\nnpm install gray-matter --save\\n```\\n\\n<br />\\n\\nWe can now parse the data and pass it to the `PostTemplate` props:\\n\\n> Don't forget to import `matter`\\n\\n```js:1,8,10-11,13-14\\nimport matter from 'gray-matter'\\n\\n// ...\\n\\nPostTemplate.getInitialProps = async (context) => {\\n  const { slug } = context.query\\n  // Import our .md file using the `slug` from the URL\\n  const content = await import(`../../content/${slug}.md`)\\n\\n  // Parse .md data through `matter`\\n  const data = matter(content.default)\\n\\n  // Pass data to the component props\\n  return { ...data }\\n}\\n```\\n\\n<br />\\n\\nAwesome, now we should be able to access `data` in our component `props`.\\nLet's try it, refresh the page... **Ah, snap!**\\n\\nAre you getting a `TypeError: expected input to be a string or buffer` error?\\n\\n<br />\\n\\nNo worries, we need to add some NextJS configuration to tell it to load `.md` files,\\nthis is a simple process, in the root of your project run:\\n\\n```bash\\ntouch next.config.js\\n```\\n\\nInside that new file paste the following code:\\n\\n```js\\nmodule.exports = {\\n  webpack: function(config) {\\n    config.module.rules.push({\\n      test: /\\\\.md$/,\\n      use: 'raw-loader',\\n    })\\n    return config\\n  }\\n}\\n```\\n\\nThis will be using the `raw-loader` package, so we'll need to install that as well:\\n\\n```bash\\nnpm install raw-loader --save\\n```\\n\\n> Don't forget to restart your application\\n\\n<br />\\n\\nNow lets change our component to receive our new `props`:\\n\\n```js:1-3,7\\nexport default function PostTemplate({ content, data }) {\\n  // This holds the data between `---` from the .md file\\n  const frontmatter = data\\n\\n  return (\\n    <div>\\n      <h1>{frontmatter.title}</h1>\\n    </div>\\n  )\\n}\\n```\\n\\nRefresh your page, you should see **Hello World**.\\n\\n<br />\\n\\nIt's missing rendering the `content`, lets take care of that:\\n\\n```js:9\\nexport default function PostTemplate({ content, data }) {\\n  // This holds the data between `---` from the .md file\\n  const frontmatter = data\\n\\n  return (\\n    <div>\\n      <h1>{frontmatter.title}</h1>\\n\\n      <p>{content}</p>\\n    </div>\\n  )\\n}\\n```\\n\\nOk, this great, you should be able to see **This is my first blog post!**\\n\\n---\\n\\n## Markdown Format\\n\\nNow that we can render our markdown files fine, lets add some formatting to our\\npost file, go ahead and change `hello-world.md`:\\n\\n```md:6-10\\n---\\ntitle: \\\"Hello World\\\"\\ndate: \\\"2020-01-07\\\"\\n---\\n\\n### Step 1\\n\\n- Install dependencies\\n- Run locally\\n- Deploy to Zeit\\n```\\n\\nHmmm, format is not working like expected, it's just raw text.\\n\\n<br />\\n\\nLets take care of that, we'll be using [react-markdown](https://github.com/rexxars/react-markdown)\\nto handle markdown formatting:\\n\\n```bash\\nnpm install react-markdown --save\\n```\\n\\nNow lets update our `PostTemplate` component:\\n\\n```js:3,13\\nimport React from 'react'\\nimport matter from 'gray-matter'\\nimport ReactMarkdown from 'react-markdown'\\n\\nexport default function PostTemplate({ content, data }) {\\n  // This holds the data between `---` from the .md file\\n  const frontmatter = data\\n\\n  return (\\n    <div>\\n      <h1>{frontmatter.title}</h1>\\n\\n      <ReactMarkdown source={content} />\\n    </div>\\n  )\\n}\\n```\\n\\nThat's it; we are done here! You can download the final code [here](https://github.com/telmogoncalves/nextjs-markdown-blog).\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./writings/nextjs-blog-in-less-than-1-hour.md\n");

/***/ })

};;