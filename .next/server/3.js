exports.ids = [3];
exports.modules = {

/***/ "./writings/destructure-everything.md":
/*!********************************************!*\
  !*** ./writings/destructure-everything.md ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Destructure Everything\\\"\\ndate: \\\"2020-01-08\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nDestructuring is a convenient way of extracting multiple values\\nfrom data stored in objects and Arrays.\\n\\n---\\n\\nLet's take a look on how to destructure an object:\\n\\n```js\\nconst info = { name: 'Telmo', age: 33, twitterHandler: '@telmo' }\\n\\n// Destructure data from `info`\\nconst { name, age, twitterHandler } = info\\n\\nconsole.log(name, age, twitterHandler) // Telmo 33 @telmo\\n```\\n\\nWhat we've done here? Instead of accessing the data through `info.name`, `info.age`, etc;\\nWe extracted the data from `info`, this way you prevent calling `info.X` multiple times.\\n\\n<br />\\n\\nLet's mock an example where you're making an API call, for this we'll be using\\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/), you can take a look to figure\\nout what it does.\\n\\n<br />\\n\\nA straight forward example is the one provided in the homepage, where we can fetch data\\nfrom [here](https://jsonplaceholder.typicode.com/todos/1) and it should return something like:\\n\\n```json\\n{\\n  \\\"userId\\\": 1,\\n  \\\"id\\\": 1,\\n  \\\"title\\\": \\\"delectus aut autem\\\",\\n  \\\"completed\\\": false\\n}\\n```\\n\\nLet's build a simple component so we can then extract the data from the API call:\\n\\n```js\\nimport React from 'react'\\n\\nexport default function MyComponent() {\\n  return (\\n    <div>My amazing component ðŸš€</div>\\n  )\\n}\\n```\\n\\n<br />\\n\\nGreat, now let's assume the data from the API call is being passed to the component\\nthrough `props`, we can either extract the data before we `return` our component:\\n\\n```js:!-3,4,7-12\\nimport React from 'react'\\n\\nexport default function MyComponent(props) {\\n  const { userId, id, title, completed } = props\\n\\n  return (\\n    <div>\\n      Task ID: {id}\\n      Created by user ID: {userId}\\n      Task title: {title}\\n      Completed: {completed}\\n    </div>\\n  )\\n}\\n```\\n\\nLooks great, but we can still save at least one least in your code, take a look:\\n\\n```js:!-3,-4\\nimport React from 'react'\\n\\nexport default function MyComponent({ userId, id, title, completed }) {\\n  const { userId, id, title, completed } = props\\n\\n  return (\\n    <div>\\n      Task ID: {id}\\n      Created by user ID: {userId}\\n      Task title: {title}\\n      Completed: {completed}\\n    </div>\\n  )\\n}\\n```\\n\\nBy extracting the data directly on `MyComponent()`, we no longer need\\nto extract the data through `const { ... } = props`.\\n\\n---\\n\\n## Let's play without brackets (Arrays)\\n\\nCheck the example bellow and notice the comments:\\n\\n```js\\nconst myTags = ['React', 'Next', 'Gatsby']\\n\\n// Get first element of the array\\nconsole.log(myTags[0]) // React\\n\\n// Destructuring the array\\nconst [tag] = myTags\\n\\nconsole.log(tag) // React\\n```\\n\\nLooks way better.\\n\\n<br />\\n\\nGoing a little further, I found out about this just a few days ago, and it's\\namazing how good the code looks using this. Let's imagine the following data structure:\\n\\n```json\\n\\\"deliveries\\\": [\\n  {\\n    \\\"id\\\": 337948,\\n    \\\"shipments\\\": [\\n      {\\n        \\\"number\\\": \\\"FOO-5905959044\\\",\\n        \\\"products\\\": [\\n          {\\n            \\\"title\\\": \\\"Apple Pie\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"6 Pack Coronas\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"Doritos\\\"\\n          },\\n          {\\n            \\\"title\\\": \\\"Burgers\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n]\\n```\\n\\nLet's destructure this sucker using the same component as before,\\nassuming this data is being passed to the component `props`:\\n\\n```js\\n // Destructuring happening right here within `MyComponent()`\\nexport default function MyComponent({\\n  data: { deliveries }\\n}) {\\n  return (\\n    deliveries.map(delivery => {\\n      const {\\n        id,\\n         // Beauty of destructuring arrays\\n        shipments: [shipment]\\n      } = delivery\\n      // Destructuring data from the first array of `shipments`\\n      const { number, products } = shipment\\n\\n      return (\\n        <div>\\n          Order with ID {id} and tracking shipment\\n          number {number}\\n\\n          <ul>\\n            {products.map(({ title }) => ( // Destructuring happening here within `()`\\n              <li>{title}</li>\\n            ))}\\n          </ul>\\n        </div>\\n      )\\n    })\\n  )\\n}\\n```\\n\\nYou can check [this CodeSandbox](https://codesandbox.io/s/infallible-wilbur-xo90i) I've put together.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93cml0aW5ncy9kZXN0cnVjdHVyZS1ldmVyeXRoaW5nLm1kPzQ2MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSwrWEFBZ1UsbURBQW1ELDRDQUE0Qyw0QkFBNEIsc0tBQXNLLHFmQUFxZixpR0FBaUcseUtBQXlLLDREQUE0RCx3UkFBd1IsV0FBVywrQkFBK0IsbURBQW1ELEdBQUcsNkJBQTZCLE9BQU8scUJBQXFCLE1BQU0sb0JBQW9CLFVBQVUsb0JBQW9CLDZLQUE2SywrQkFBK0IsR0FBRyxXQUFXLCtCQUErQixtREFBbUQsR0FBRyw2QkFBNkIsT0FBTyxxQkFBcUIsTUFBTSxvQkFBb0IsVUFBVSxvQkFBb0Isb0hBQW9ILE1BQU0sNmlCQUE2aUIsb0RBQW9ELCtFQUErRSxtREFBbUQsY0FBYyx3REFBd0QsY0FBYyxpREFBaUQsY0FBYyxpREFBaUQsb0JBQW9CLFlBQVksMFBBQTBQLFdBQVcsYUFBYSxHQUFHLEdBQUcsOENBQThDLGVBQWUsaUdBQWlHLDJGQUEyRixtQkFBbUIsdUVBQXVFLEdBQUcsMENBQTBDLE9BQU8saUNBQWlDLGVBQWUsUUFBUSx1RUFBdUUsTUFBTSxzQkFBc0IsaURBQWlELFNBQVMsaUhBQWlIIiwiZmlsZSI6Ii4vd3JpdGluZ3MvZGVzdHJ1Y3R1cmUtZXZlcnl0aGluZy5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiLS0tXFxudGl0bGU6IFxcXCJEZXN0cnVjdHVyZSBFdmVyeXRoaW5nXFxcIlxcbmRhdGU6IFxcXCIyMDIwLTAxLTA4XFxcIlxcbmF1dGhvcjpcXG4gIHR3aXR0ZXI6IFxcXCJ0ZWxtb1xcXCJcXG4gIG5hbWU6IFxcXCJUZWxtbyBHb25jYWx2ZXNcXFwiXFxuLS0tXFxuXFxuRGVzdHJ1Y3R1cmluZyBpcyBhIGNvbnZlbmllbnQgd2F5IG9mIGV4dHJhY3RpbmcgbXVsdGlwbGUgdmFsdWVzXFxuZnJvbSBkYXRhIHN0b3JlZCBpbiBvYmplY3RzIGFuZCBBcnJheXMuXFxuXFxuLS0tXFxuXFxuTGV0J3MgdGFrZSBhIGxvb2sgb24gaG93IHRvIGRlc3RydWN0dXJlIGFuIG9iamVjdDpcXG5cXG5gYGBqc1xcbmNvbnN0IGluZm8gPSB7IG5hbWU6ICdUZWxtbycsIGFnZTogMzMsIHR3aXR0ZXJIYW5kbGVyOiAnQHRlbG1vJyB9XFxuXFxuLy8gRGVzdHJ1Y3R1cmUgZGF0YSBmcm9tIGBpbmZvYFxcbmNvbnN0IHsgbmFtZSwgYWdlLCB0d2l0dGVySGFuZGxlciB9ID0gaW5mb1xcblxcbmNvbnNvbGUubG9nKG5hbWUsIGFnZSwgdHdpdHRlckhhbmRsZXIpIC8vIFRlbG1vIDMzIEB0ZWxtb1xcbmBgYFxcblxcbldoYXQgd2UndmUgZG9uZSBoZXJlPyBJbnN0ZWFkIG9mIGFjY2Vzc2luZyB0aGUgZGF0YSB0aHJvdWdoIGBpbmZvLm5hbWVgLCBgaW5mby5hZ2VgLCBldGM7XFxuV2UgZXh0cmFjdGVkIHRoZSBkYXRhIGZyb20gYGluZm9gLCB0aGlzIHdheSB5b3UgcHJldmVudCBjYWxsaW5nIGBpbmZvLlhgIG11bHRpcGxlIHRpbWVzLlxcblxcbjxiciAvPlxcblxcbkxldCdzIG1vY2sgYW4gZXhhbXBsZSB3aGVyZSB5b3UncmUgbWFraW5nIGFuIEFQSSBjYWxsLCBmb3IgdGhpcyB3ZSdsbCBiZSB1c2luZ1xcbltKU09OUGxhY2Vob2xkZXJdKGh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS8pLCB5b3UgY2FuIHRha2UgYSBsb29rIHRvIGZpZ3VyZVxcbm91dCB3aGF0IGl0IGRvZXMuXFxuXFxuPGJyIC8+XFxuXFxuQSBzdHJhaWdodCBmb3J3YXJkIGV4YW1wbGUgaXMgdGhlIG9uZSBwcm92aWRlZCBpbiB0aGUgaG9tZXBhZ2UsIHdoZXJlIHdlIGNhbiBmZXRjaCBkYXRhXFxuZnJvbSBbaGVyZV0oaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zLzEpIGFuZCBpdCBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBsaWtlOlxcblxcbmBgYGpzb25cXG57XFxuICBcXFwidXNlcklkXFxcIjogMSxcXG4gIFxcXCJpZFxcXCI6IDEsXFxuICBcXFwidGl0bGVcXFwiOiBcXFwiZGVsZWN0dXMgYXV0IGF1dGVtXFxcIixcXG4gIFxcXCJjb21wbGV0ZWRcXFwiOiBmYWxzZVxcbn1cXG5gYGBcXG5cXG5MZXQncyBidWlsZCBhIHNpbXBsZSBjb21wb25lbnQgc28gd2UgY2FuIHRoZW4gZXh0cmFjdCB0aGUgZGF0YSBmcm9tIHRoZSBBUEkgY2FsbDpcXG5cXG5gYGBqc1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcXG5cXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNeUNvbXBvbmVudCgpIHtcXG4gIHJldHVybiAoXFxuICAgIDxkaXY+TXkgYW1hemluZyBjb21wb25lbnQg8J+agDwvZGl2PlxcbiAgKVxcbn1cXG5gYGBcXG5cXG48YnIgLz5cXG5cXG5HcmVhdCwgbm93IGxldCdzIGFzc3VtZSB0aGUgZGF0YSBmcm9tIHRoZSBBUEkgY2FsbCBpcyBiZWluZyBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudFxcbnRocm91Z2ggYHByb3BzYCwgd2UgY2FuIGVpdGhlciBleHRyYWN0IHRoZSBkYXRhIGJlZm9yZSB3ZSBgcmV0dXJuYCBvdXIgY29tcG9uZW50OlxcblxcbmBgYGpzOiEtMyw0LDctMTJcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlDb21wb25lbnQocHJvcHMpIHtcXG4gIGNvbnN0IHsgdXNlcklkLCBpZCwgdGl0bGUsIGNvbXBsZXRlZCB9ID0gcHJvcHNcXG5cXG4gIHJldHVybiAoXFxuICAgIDxkaXY+XFxuICAgICAgVGFzayBJRDoge2lkfVxcbiAgICAgIENyZWF0ZWQgYnkgdXNlciBJRDoge3VzZXJJZH1cXG4gICAgICBUYXNrIHRpdGxlOiB7dGl0bGV9XFxuICAgICAgQ29tcGxldGVkOiB7Y29tcGxldGVkfVxcbiAgICA8L2Rpdj5cXG4gIClcXG59XFxuYGBgXFxuXFxuTG9va3MgZ3JlYXQsIGJ1dCB3ZSBjYW4gc3RpbGwgc2F2ZSBhdCBsZWFzdCBvbmUgbGVhc3QgaW4geW91ciBjb2RlLCB0YWtlIGEgbG9vazpcXG5cXG5gYGBqczohLTMsLTRcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlDb21wb25lbnQoeyB1c2VySWQsIGlkLCB0aXRsZSwgY29tcGxldGVkIH0pIHtcXG4gIGNvbnN0IHsgdXNlcklkLCBpZCwgdGl0bGUsIGNvbXBsZXRlZCB9ID0gcHJvcHNcXG5cXG4gIHJldHVybiAoXFxuICAgIDxkaXY+XFxuICAgICAgVGFzayBJRDoge2lkfVxcbiAgICAgIENyZWF0ZWQgYnkgdXNlciBJRDoge3VzZXJJZH1cXG4gICAgICBUYXNrIHRpdGxlOiB7dGl0bGV9XFxuICAgICAgQ29tcGxldGVkOiB7Y29tcGxldGVkfVxcbiAgICA8L2Rpdj5cXG4gIClcXG59XFxuYGBgXFxuXFxuQnkgZXh0cmFjdGluZyB0aGUgZGF0YSBkaXJlY3RseSBvbiBgTXlDb21wb25lbnQoKWAsIHdlIG5vIGxvbmdlciBuZWVkXFxudG8gZXh0cmFjdCB0aGUgZGF0YSB0aHJvdWdoIGBjb25zdCB7IC4uLiB9ID0gcHJvcHNgLlxcblxcbi0tLVxcblxcbiMjIExldCdzIHBsYXkgd2l0aG91dCBicmFja2V0cyAoQXJyYXlzKVxcblxcbkNoZWNrIHRoZSBleGFtcGxlIGJlbGxvdyBhbmQgbm90aWNlIHRoZSBjb21tZW50czpcXG5cXG5gYGBqc1xcbmNvbnN0IG15VGFncyA9IFsnUmVhY3QnLCAnTmV4dCcsICdHYXRzYnknXVxcblxcbi8vIEdldCBmaXJzdCBlbGVtZW50IG9mIHRoZSBhcnJheVxcbmNvbnNvbGUubG9nKG15VGFnc1swXSkgLy8gUmVhY3RcXG5cXG4vLyBEZXN0cnVjdHVyaW5nIHRoZSBhcnJheVxcbmNvbnN0IFt0YWddID0gbXlUYWdzXFxuXFxuY29uc29sZS5sb2codGFnKSAvLyBSZWFjdFxcbmBgYFxcblxcbkxvb2tzIHdheSBiZXR0ZXIuXFxuXFxuPGJyIC8+XFxuXFxuR29pbmcgYSBsaXR0bGUgZnVydGhlciwgSSBmb3VuZCBvdXQgYWJvdXQgdGhpcyBqdXN0IGEgZmV3IGRheXMgYWdvLCBhbmQgaXQnc1xcbmFtYXppbmcgaG93IGdvb2QgdGhlIGNvZGUgbG9va3MgdXNpbmcgdGhpcy4gTGV0J3MgaW1hZ2luZSB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlOlxcblxcbmBgYGpzb25cXG5cXFwiZGVsaXZlcmllc1xcXCI6IFtcXG4gIHtcXG4gICAgXFxcImlkXFxcIjogMzM3OTQ4LFxcbiAgICBcXFwic2hpcG1lbnRzXFxcIjogW1xcbiAgICAgIHtcXG4gICAgICAgIFxcXCJudW1iZXJcXFwiOiBcXFwiRk9PLTU5MDU5NTkwNDRcXFwiLFxcbiAgICAgICAgXFxcInByb2R1Y3RzXFxcIjogW1xcbiAgICAgICAgICB7XFxuICAgICAgICAgICAgXFxcInRpdGxlXFxcIjogXFxcIkFwcGxlIFBpZVxcXCJcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJ0aXRsZVxcXCI6IFxcXCI2IFBhY2sgQ29yb25hc1xcXCJcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJ0aXRsZVxcXCI6IFxcXCJEb3JpdG9zXFxcIlxcbiAgICAgICAgICB9LFxcbiAgICAgICAgICB7XFxuICAgICAgICAgICAgXFxcInRpdGxlXFxcIjogXFxcIkJ1cmdlcnNcXFwiXFxuICAgICAgICAgIH1cXG4gICAgICAgIF1cXG4gICAgICB9XFxuICAgIF1cXG4gIH1cXG5dXFxuYGBgXFxuXFxuTGV0J3MgZGVzdHJ1Y3R1cmUgdGhpcyBzdWNrZXIgdXNpbmcgdGhlIHNhbWUgY29tcG9uZW50IGFzIGJlZm9yZSxcXG5hc3N1bWluZyB0aGlzIGRhdGEgaXMgYmVpbmcgcGFzc2VkIHRvIHRoZSBjb21wb25lbnQgYHByb3BzYDpcXG5cXG5gYGBqc1xcbiAvLyBEZXN0cnVjdHVyaW5nIGhhcHBlbmluZyByaWdodCBoZXJlIHdpdGhpbiBgTXlDb21wb25lbnQoKWBcXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNeUNvbXBvbmVudCh7XFxuICBkYXRhOiB7IGRlbGl2ZXJpZXMgfVxcbn0pIHtcXG4gIHJldHVybiAoXFxuICAgIGRlbGl2ZXJpZXMubWFwKGRlbGl2ZXJ5ID0+IHtcXG4gICAgICBjb25zdCB7XFxuICAgICAgICBpZCxcXG4gICAgICAgICAvLyBCZWF1dHkgb2YgZGVzdHJ1Y3R1cmluZyBhcnJheXNcXG4gICAgICAgIHNoaXBtZW50czogW3NoaXBtZW50XVxcbiAgICAgIH0gPSBkZWxpdmVyeVxcbiAgICAgIC8vIERlc3RydWN0dXJpbmcgZGF0YSBmcm9tIHRoZSBmaXJzdCBhcnJheSBvZiBgc2hpcG1lbnRzYFxcbiAgICAgIGNvbnN0IHsgbnVtYmVyLCBwcm9kdWN0cyB9ID0gc2hpcG1lbnRcXG5cXG4gICAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdj5cXG4gICAgICAgICAgT3JkZXIgd2l0aCBJRCB7aWR9IGFuZCB0cmFja2luZyBzaGlwbWVudFxcbiAgICAgICAgICBudW1iZXIge251bWJlcn1cXG5cXG4gICAgICAgICAgPHVsPlxcbiAgICAgICAgICAgIHtwcm9kdWN0cy5tYXAoKHsgdGl0bGUgfSkgPT4gKCAvLyBEZXN0cnVjdHVyaW5nIGhhcHBlbmluZyBoZXJlIHdpdGhpbiBgKClgXFxuICAgICAgICAgICAgICA8bGk+e3RpdGxlfTwvbGk+XFxuICAgICAgICAgICAgKSl9XFxuICAgICAgICAgIDwvdWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICApXFxuICAgIH0pXFxuICApXFxufVxcbmBgYFxcblxcbllvdSBjYW4gY2hlY2sgW3RoaXMgQ29kZVNhbmRib3hdKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9pbmZhbGxpYmxlLXdpbGJ1ci14bzkwaSkgSSd2ZSBwdXQgdG9nZXRoZXIuXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./writings/destructure-everything.md\n");

/***/ })

};;