exports.ids = [4];
exports.modules = {

/***/ "./writings/filter-array-in-javascript.md":
/*!************************************************!*\
  !*** ./writings/filter-array-in-javascript.md ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"filter() Array Method with Javascript\\\"\\ndate: \\\"2020-01-09\\\"\\nauthor:\\n  twitter: \\\"telmo\\\"\\n  name: \\\"Telmo Goncalves\\\"\\n---\\n\\nRecently I've found out about filtering array using type guards,\\nsuch as `Number` or `Boolean` and I thought it would be good to\\nwrite a small post about it.\\n\\n<br />\\n\\nI've posted a Tweet about this, which contain a really neat trick in my opinion:\\n\\n<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Get rid of falsy values from an array, pretty neat.<br><br>ðŸ”¥ðŸ”¥<a href=\\\"https://twitter.com/hashtag/js?src=hash&amp;ref_src=twsrc%5Etfw\\\">#js</a> <a href=\\\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\\\">#javascript</a> <a href=\\\"https://twitter.com/hashtag/react?src=hash&amp;ref_src=twsrc%5Etfw\\\">#react</a> <a href=\\\"https://twitter.com/hashtag/reactjs?src=hash&amp;ref_src=twsrc%5Etfw\\\">#reactjs</a> <a href=\\\"https://twitter.com/hashtag/programming?src=hash&amp;ref_src=twsrc%5Etfw\\\">#programming</a> <a href=\\\"https://twitter.com/hashtag/code?src=hash&amp;ref_src=twsrc%5Etfw\\\">#code</a> <a href=\\\"https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;ref_src=twsrc%5Etfw\\\">#100DaysOfCode</a> <a href=\\\"https://twitter.com/hashtag/tip?src=hash&amp;ref_src=twsrc%5Etfw\\\">#tip</a> <a href=\\\"https://twitter.com/hashtag/tips?src=hash&amp;ref_src=twsrc%5Etfw\\\">#tips</a> <a href=\\\"https://twitter.com/hashtag/array?src=hash&amp;ref_src=twsrc%5Etfw\\\">#array</a> <a href=\\\"https://twitter.com/hashtag/mentor?src=hash&amp;ref_src=twsrc%5Etfw\\\">#mentor</a> <a href=\\\"https://twitter.com/hashtag/coding?src=hash&amp;ref_src=twsrc%5Etfw\\\">#coding</a> <a href=\\\"https://t.co/Y43WDmmJYE\\\">pic.twitter.com/Y43WDmmJYE</a></p>&mdash; Telmo Goncalves (@telmo) <a href=\\\"https://twitter.com/telmo/status/1215244075579924480?ref_src=twsrc%5Etfw\\\">January 9, 2020</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\\n\\nLet's do this.\\n\\n---\\n\\n## Type Guards\\n\\nTake the following array example, where we'll have both falsy statements and strings:\\n\\n```js\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n```\\n\\nMy first approach here to filter the falsy statements and returns just the strings would be\\nto go with something like the following:\\n\\n```js:3\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\narr.filter(value => value && value) // [\\\"NextJS\\\", \\\"React\\\"]\\n```\\n\\nWhich is perfectly fine, although there's a more elegant way of doing this:\\n\\n```js:-3,4\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\narr.filter(value => value && value)\\narr.filter(Boolean) // [\\\"NextJS\\\", \\\"React\\\"]\\n```\\n\\nBoth return exactly the same thing, aside from that I went ahead and\\ntested the performance on both methods:\\n\\n```js\\nconst arr = [false, 'NextJS', undefined, 'React', null]\\n\\n// Took 0.030000024707987905 milliseconds to run\\narr.filter(value => value && value)\\n\\n// Took 0.004999979864805937 milliseconds to run\\narr.filter(Boolean)\\n```\\n\\nIt's amazing how faster it is to use `.filter(Boolean)`.\\n\\n---\\n\\n## What about numbers and string?\\n\\nI liked this so much I went ahead and tried filtering numbers and strings, I ran\\na couple of examples, let's start with numbers:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n```\\n\\nWith this example we want to filter the numbers, removing all strings:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n\\narr.filter(Number) // [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n```\\n\\nThis returns exactly the same array, `\\\"4\\\"` and `\\\"6\\\"` are being considered numbers,\\nbecause well, they are numbers. Javascript is a tricky fellow.\\n\\n<br />\\n\\nIf we actually had strings in our array it would work fine:\\n\\n```js:!-1\\nconst arr = [1, 2, 3, \\\"Fancy\\\", 5, \\\"Array\\\"]\\n\\narr.filter(Number) // [1, 2, 3, 5]\\n```\\n\\n<br />\\n\\nThe only way I got to filter numbers, even when numbers are string (`\\\"4\\\"`), was\\nby checking the data type:\\n\\n```js\\nconst arr = [1, 2, 3, \\\"4\\\", 5, \\\"6\\\"]\\n\\narr.filter(value => typeof value === 'number' && value) // [1, 2, 3, 5]\\n```\\n\\n---\\n\\nI thought it was a simple and short post that can probably help someone, and I hope it does. If there's\\nanything else that you think I should write about or you need some help just let me know.\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93cml0aW5ncy9maWx0ZXItYXJyYXktaW4tamF2YXNjcmlwdC5tZD9jNTU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUscW9CQUFza0IsNEZBQTRGLCtGQUErRiw0RkFBNEYsa0dBQWtHLCtGQUErRixpR0FBaUcsZ0dBQWdHLHVGQUF1Rix5RkFBeUYsMkZBQTJGLDRGQUE0RiwrR0FBK0cscWdGQUFxZ0YiLCJmaWxlIjoiLi93cml0aW5ncy9maWx0ZXItYXJyYXktaW4tamF2YXNjcmlwdC5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiLS0tXFxudGl0bGU6IFxcXCJmaWx0ZXIoKSBBcnJheSBNZXRob2Qgd2l0aCBKYXZhc2NyaXB0XFxcIlxcbmRhdGU6IFxcXCIyMDIwLTAxLTA5XFxcIlxcbmF1dGhvcjpcXG4gIHR3aXR0ZXI6IFxcXCJ0ZWxtb1xcXCJcXG4gIG5hbWU6IFxcXCJUZWxtbyBHb25jYWx2ZXNcXFwiXFxuLS0tXFxuXFxuUmVjZW50bHkgSSd2ZSBmb3VuZCBvdXQgYWJvdXQgZmlsdGVyaW5nIGFycmF5IHVzaW5nIHR5cGUgZ3VhcmRzLFxcbnN1Y2ggYXMgYE51bWJlcmAgb3IgYEJvb2xlYW5gIGFuZCBJIHRob3VnaHQgaXQgd291bGQgYmUgZ29vZCB0b1xcbndyaXRlIGEgc21hbGwgcG9zdCBhYm91dCBpdC5cXG5cXG48YnIgLz5cXG5cXG5JJ3ZlIHBvc3RlZCBhIFR3ZWV0IGFib3V0IHRoaXMsIHdoaWNoIGNvbnRhaW4gYSByZWFsbHkgbmVhdCB0cmljayBpbiBteSBvcGluaW9uOlxcblxcbjxibG9ja3F1b3RlIGNsYXNzPVxcXCJ0d2l0dGVyLXR3ZWV0XFxcIj48cCBsYW5nPVxcXCJlblxcXCIgZGlyPVxcXCJsdHJcXFwiPkdldCByaWQgb2YgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXksIHByZXR0eSBuZWF0Ljxicj48YnI+8J+UpfCflKU8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvanM/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNqczwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL2phdmFzY3JpcHQ/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNqYXZhc2NyaXB0PC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvcmVhY3Q/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNyZWFjdDwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL3JlYWN0anM/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNyZWFjdGpzPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvcHJvZ3JhbW1pbmc/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNwcm9ncmFtbWluZzwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL2NvZGU/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNjb2RlPC9hPiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvMTAwRGF5c09mQ29kZT9zcmM9aGFzaCZhbXA7cmVmX3NyYz10d3NyYyU1RXRmd1xcXCI+IzEwMERheXNPZkNvZGU8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy90aXA/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiN0aXA8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy90aXBzP3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jdGlwczwvYT4gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL2FycmF5P3NyYz1oYXNoJmFtcDtyZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj4jYXJyYXk8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9tZW50b3I/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNtZW50b3I8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9jb2Rpbmc/c3JjPWhhc2gmYW1wO3JlZl9zcmM9dHdzcmMlNUV0ZndcXFwiPiNjb2Rpbmc8L2E+IDxhIGhyZWY9XFxcImh0dHBzOi8vdC5jby9ZNDNXRG1tSllFXFxcIj5waWMudHdpdHRlci5jb20vWTQzV0RtbUpZRTwvYT48L3A+Jm1kYXNoOyBUZWxtbyBHb25jYWx2ZXMgKEB0ZWxtbykgPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS90ZWxtby9zdGF0dXMvMTIxNTI0NDA3NTU3OTkyNDQ4MD9yZWZfc3JjPXR3c3JjJTVFdGZ3XFxcIj5KYW51YXJ5IDksIDIwMjA8L2E+PC9ibG9ja3F1b3RlPlxcbjxzY3JpcHQgYXN5bmMgc3JjPVxcXCJodHRwczovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanNcXFwiIGNoYXJzZXQ9XFxcInV0Zi04XFxcIj48L3NjcmlwdD5cXG5cXG5cXG5MZXQncyBkbyB0aGlzLlxcblxcbi0tLVxcblxcbiMjIFR5cGUgR3VhcmRzXFxuXFxuVGFrZSB0aGUgZm9sbG93aW5nIGFycmF5IGV4YW1wbGUsIHdoZXJlIHdlJ2xsIGhhdmUgYm90aCBmYWxzeSBzdGF0ZW1lbnRzIGFuZCBzdHJpbmdzOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyID0gW2ZhbHNlLCAnTmV4dEpTJywgdW5kZWZpbmVkLCAnUmVhY3QnLCBudWxsXVxcbmBgYFxcblxcbk15IGZpcnN0IGFwcHJvYWNoIGhlcmUgdG8gZmlsdGVyIHRoZSBmYWxzeSBzdGF0ZW1lbnRzIGFuZCByZXR1cm5zIGp1c3QgdGhlIHN0cmluZ3Mgd291bGQgYmVcXG50byBnbyB3aXRoIHNvbWV0aGluZyBsaWtlIHRoZSBmb2xsb3dpbmc6XFxuXFxuYGBganM6M1xcbmNvbnN0IGFyciA9IFtmYWxzZSwgJ05leHRKUycsIHVuZGVmaW5lZCwgJ1JlYWN0JywgbnVsbF1cXG5cXG5hcnIuZmlsdGVyKHZhbHVlID0+IHZhbHVlICYmIHZhbHVlKSAvLyBbXFxcIk5leHRKU1xcXCIsIFxcXCJSZWFjdFxcXCJdXFxuYGBgXFxuXFxuV2hpY2ggaXMgcGVyZmVjdGx5IGZpbmUsIGFsdGhvdWdoIHRoZXJlJ3MgYSBtb3JlIGVsZWdhbnQgd2F5IG9mIGRvaW5nIHRoaXM6XFxuXFxuYGBganM6LTMsNFxcbmNvbnN0IGFyciA9IFtmYWxzZSwgJ05leHRKUycsIHVuZGVmaW5lZCwgJ1JlYWN0JywgbnVsbF1cXG5cXG5hcnIuZmlsdGVyKHZhbHVlID0+IHZhbHVlICYmIHZhbHVlKVxcbmFyci5maWx0ZXIoQm9vbGVhbikgLy8gW1xcXCJOZXh0SlNcXFwiLCBcXFwiUmVhY3RcXFwiXVxcbmBgYFxcblxcbkJvdGggcmV0dXJuIGV4YWN0bHkgdGhlIHNhbWUgdGhpbmcsIGFzaWRlIGZyb20gdGhhdCBJIHdlbnQgYWhlYWQgYW5kXFxudGVzdGVkIHRoZSBwZXJmb3JtYW5jZSBvbiBib3RoIG1ldGhvZHM6XFxuXFxuYGBganNcXG5jb25zdCBhcnIgPSBbZmFsc2UsICdOZXh0SlMnLCB1bmRlZmluZWQsICdSZWFjdCcsIG51bGxdXFxuXFxuLy8gVG9vayAwLjAzMDAwMDAyNDcwNzk4NzkwNSBtaWxsaXNlY29uZHMgdG8gcnVuXFxuYXJyLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAmJiB2YWx1ZSlcXG5cXG4vLyBUb29rIDAuMDA0OTk5OTc5ODY0ODA1OTM3IG1pbGxpc2Vjb25kcyB0byBydW5cXG5hcnIuZmlsdGVyKEJvb2xlYW4pXFxuYGBgXFxuXFxuSXQncyBhbWF6aW5nIGhvdyBmYXN0ZXIgaXQgaXMgdG8gdXNlIGAuZmlsdGVyKEJvb2xlYW4pYC5cXG5cXG4tLS1cXG5cXG4jIyBXaGF0IGFib3V0IG51bWJlcnMgYW5kIHN0cmluZz9cXG5cXG5JIGxpa2VkIHRoaXMgc28gbXVjaCBJIHdlbnQgYWhlYWQgYW5kIHRyaWVkIGZpbHRlcmluZyBudW1iZXJzIGFuZCBzdHJpbmdzLCBJIHJhblxcbmEgY291cGxlIG9mIGV4YW1wbGVzLCBsZXQncyBzdGFydCB3aXRoIG51bWJlcnM6XFxuXFxuYGBganNcXG5jb25zdCBhcnIgPSBbMSwgMiwgMywgXFxcIjRcXFwiLCA1LCBcXFwiNlxcXCJdXFxuYGBgXFxuXFxuV2l0aCB0aGlzIGV4YW1wbGUgd2Ugd2FudCB0byBmaWx0ZXIgdGhlIG51bWJlcnMsIHJlbW92aW5nIGFsbCBzdHJpbmdzOlxcblxcbmBgYGpzXFxuY29uc3QgYXJyID0gWzEsIDIsIDMsIFxcXCI0XFxcIiwgNSwgXFxcIjZcXFwiXVxcblxcbmFyci5maWx0ZXIoTnVtYmVyKSAvLyBbMSwgMiwgMywgXFxcIjRcXFwiLCA1LCBcXFwiNlxcXCJdXFxuYGBgXFxuXFxuVGhpcyByZXR1cm5zIGV4YWN0bHkgdGhlIHNhbWUgYXJyYXksIGBcXFwiNFxcXCJgIGFuZCBgXFxcIjZcXFwiYCBhcmUgYmVpbmcgY29uc2lkZXJlZCBudW1iZXJzLFxcbmJlY2F1c2Ugd2VsbCwgdGhleSBhcmUgbnVtYmVycy4gSmF2YXNjcmlwdCBpcyBhIHRyaWNreSBmZWxsb3cuXFxuXFxuPGJyIC8+XFxuXFxuSWYgd2UgYWN0dWFsbHkgaGFkIHN0cmluZ3MgaW4gb3VyIGFycmF5IGl0IHdvdWxkIHdvcmsgZmluZTpcXG5cXG5gYGBqczohLTFcXG5jb25zdCBhcnIgPSBbMSwgMiwgMywgXFxcIkZhbmN5XFxcIiwgNSwgXFxcIkFycmF5XFxcIl1cXG5cXG5hcnIuZmlsdGVyKE51bWJlcikgLy8gWzEsIDIsIDMsIDVdXFxuYGBgXFxuXFxuPGJyIC8+XFxuXFxuVGhlIG9ubHkgd2F5IEkgZ290IHRvIGZpbHRlciBudW1iZXJzLCBldmVuIHdoZW4gbnVtYmVycyBhcmUgc3RyaW5nIChgXFxcIjRcXFwiYCksIHdhc1xcbmJ5IGNoZWNraW5nIHRoZSBkYXRhIHR5cGU6XFxuXFxuYGBganNcXG5jb25zdCBhcnIgPSBbMSwgMiwgMywgXFxcIjRcXFwiLCA1LCBcXFwiNlxcXCJdXFxuXFxuYXJyLmZpbHRlcih2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlKSAvLyBbMSwgMiwgMywgNV1cXG5gYGBcXG5cXG4tLS1cXG5cXG5JIHRob3VnaHQgaXQgd2FzIGEgc2ltcGxlIGFuZCBzaG9ydCBwb3N0IHRoYXQgY2FuIHByb2JhYmx5IGhlbHAgc29tZW9uZSwgYW5kIEkgaG9wZSBpdCBkb2VzLiBJZiB0aGVyZSdzXFxuYW55dGhpbmcgZWxzZSB0aGF0IHlvdSB0aGluayBJIHNob3VsZCB3cml0ZSBhYm91dCBvciB5b3UgbmVlZCBzb21lIGhlbHAganVzdCBsZXQgbWUga25vdy5cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./writings/filter-array-in-javascript.md\n");

/***/ })

};;