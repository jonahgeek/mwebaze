{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createElement = _interopRequireDefault(require(\"./create-element\"));\n\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      _ref$numberProps = _ref.numberProps,\n      numberProps = _ref$numberProps === void 0 ? {} : _ref$numberProps;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    var properties = typeof numberProps === 'function' ? numberProps(number) : numberProps;\n    return _react.default.createElement(\"span\", (0, _extends2.default)({\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\"\n    }, properties), \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction LineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerProps = _ref2.containerProps,\n      containerProps = _ref2$containerProps === void 0 ? {} : _ref2$containerProps,\n      numberProps = _ref2.numberProps,\n      startingLineNumber = _ref2.startingLineNumber;\n  containerProps.style = containerProps.style || {\n    float: 'left',\n    paddingRight: '10px'\n  };\n  return _react.default.createElement(\"code\", (0, _extends2.default)({}, containerProps, {\n    style: Object.assign({}, codeStyle, containerProps.style)\n  }), getLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    numberProps: numberProps,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineProps = _ref3.lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = (typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps) || {};\n  properties.className = properties.className ? className.concat(properties.className) : className;\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction wrapLinesInSpan(codeTree, lineProps) {\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = newTree.length + 1;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        };\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          newTree.push(createLineElement({\n            children: _children,\n            lineNumber: lineNumber,\n            lineProps: lineProps\n          }));\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            newTree.push(createLineElement({\n              children: [newChild],\n              lineNumber: lineNumber,\n              lineProps: lineProps,\n              className: node.properties.className\n            }));\n          }\n        } else {\n          newTree.push(createLineElement({\n            children: [newChild],\n            lineNumber: lineNumber,\n            lineProps: lineProps,\n            className: node.properties.className\n          }));\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      newTree.push(createLineElement({\n        children: children,\n        lineNumber: newTree.length + 1,\n        lineProps: lineProps\n      }));\n    }\n  }\n\n  return newTree;\n}\n\nfunction defaultRenderer(_ref4) {\n  var rows = _ref4.rows,\n      stylesheet = _ref4.stylesheet,\n      useInlineStyles = _ref4.useInlineStyles;\n  return rows.map(function (node, i) {\n    return (0, _createElement.default)({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n}\n\nfunction getCodeTree(_ref5) {\n  var astGenerator = _ref5.astGenerator,\n      language = _ref5.language,\n      code = _ref5.code,\n      defaultCodeValue = _ref5.defaultCodeValue;\n\n  if (astGenerator.getLanguage) {\n    var hasLanguage = language && astGenerator.getLanguage(language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  }\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nfunction _default(defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref6) {\n    var language = _ref6.language,\n        children = _ref6.children,\n        _ref6$style = _ref6.style,\n        style = _ref6$style === void 0 ? defaultStyle : _ref6$style,\n        _ref6$customStyle = _ref6.customStyle,\n        customStyle = _ref6$customStyle === void 0 ? {} : _ref6$customStyle,\n        _ref6$codeTagProps = _ref6.codeTagProps,\n        codeTagProps = _ref6$codeTagProps === void 0 ? {\n      style: style['code[class*=\"language-\"]']\n    } : _ref6$codeTagProps,\n        _ref6$useInlineStyles = _ref6.useInlineStyles,\n        useInlineStyles = _ref6$useInlineStyles === void 0 ? true : _ref6$useInlineStyles,\n        _ref6$showLineNumbers = _ref6.showLineNumbers,\n        showLineNumbers = _ref6$showLineNumbers === void 0 ? false : _ref6$showLineNumbers,\n        _ref6$startingLineNum = _ref6.startingLineNumber,\n        startingLineNumber = _ref6$startingLineNum === void 0 ? 1 : _ref6$startingLineNum,\n        lineNumberContainerProps = _ref6.lineNumberContainerProps,\n        lineNumberProps = _ref6.lineNumberProps,\n        wrapLines = _ref6.wrapLines,\n        _ref6$lineProps = _ref6.lineProps,\n        lineProps = _ref6$lineProps === void 0 ? {} : _ref6$lineProps,\n        renderer = _ref6.renderer,\n        _ref6$PreTag = _ref6.PreTag,\n        PreTag = _ref6$PreTag === void 0 ? 'pre' : _ref6$PreTag,\n        _ref6$CodeTag = _ref6.CodeTag,\n        CodeTag = _ref6$CodeTag === void 0 ? 'code' : _ref6$CodeTag,\n        _ref6$code = _ref6.code,\n        code = _ref6$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref6$code,\n        astGenerator = _ref6.astGenerator,\n        rest = (0, _objectWithoutProperties2.default)(_ref6, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"startingLineNumber\", \"lineNumberContainerProps\", \"lineNumberProps\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n    astGenerator = astGenerator || defaultAstGenerator;\n    var lineNumbers = showLineNumbers ? _react.default.createElement(LineNumbers, {\n      containerProps: lineNumberContainerProps,\n      codeStyle: codeTagProps.style || {},\n      numberProps: lineNumberProps,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: 'hljs'\n    });\n\n    if (!astGenerator) {\n      return _react.default.createElement(PreTag, preProps, lineNumbers, _react.default.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    }\n\n    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineProps) : codeTree.value;\n    return _react.default.createElement(PreTag, preProps, lineNumbers, _react.default.createElement(CodeTag, codeTagProps, renderer({\n      rows: tree,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"sources":["/home/jonathan/Projects/mwebaze/node_modules/react-syntax-highlighter/dist/cjs/highlight.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_default","_objectWithoutProperties2","_extends2","_react","_createElement","newLineRegex","getNewLines","str","match","getLineNumbers","_ref","lines","startingLineNumber","_ref$numberProps","numberProps","map","_","i","number","properties","createElement","key","concat","className","LineNumbers","_ref2","codeString","codeStyle","_ref2$containerProps","containerProps","style","float","paddingRight","assign","replace","split","createLineElement","_ref3","children","lineNumber","lineProps","_ref3$className","type","tagName","flattenCodeTree","tree","arguments","length","undefined","newTree","node","push","classNames","wrapLinesInSpan","codeTree","lastLineBreakIndex","index","_loop","newLines","splitValue","forEach","text","newChild","_children","slice","stringChild","lastLineInPreviousSpan","newElem","splice","defaultRenderer","_ref4","rows","stylesheet","useInlineStyles","getCodeTree","_ref5","astGenerator","language","code","defaultCodeValue","getLanguage","hasLanguage","highlight","highlightAuto","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref6","_ref6$style","_ref6$customStyle","customStyle","_ref6$codeTagProps","codeTagProps","_ref6$useInlineStyles","_ref6$showLineNumbers","showLineNumbers","_ref6$startingLineNum","lineNumberContainerProps","lineNumberProps","wrapLines","_ref6$lineProps","renderer","_ref6$PreTag","PreTag","_ref6$CodeTag","CodeTag","_ref6$code","Array","isArray","rest","lineNumbers","defaultPreStyle","hljs","backgroundColor","preProps"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createElement = _interopRequireDefault(require(\"./create-element\"));\n\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      _ref$numberProps = _ref.numberProps,\n      numberProps = _ref$numberProps === void 0 ? {} : _ref$numberProps;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    var properties = typeof numberProps === 'function' ? numberProps(number) : numberProps;\n    return _react.default.createElement(\"span\", (0, _extends2.default)({\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\"\n    }, properties), \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction LineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerProps = _ref2.containerProps,\n      containerProps = _ref2$containerProps === void 0 ? {} : _ref2$containerProps,\n      numberProps = _ref2.numberProps,\n      startingLineNumber = _ref2.startingLineNumber;\n  containerProps.style = containerProps.style || {\n    float: 'left',\n    paddingRight: '10px'\n  };\n  return _react.default.createElement(\"code\", (0, _extends2.default)({}, containerProps, {\n    style: Object.assign({}, codeStyle, containerProps.style)\n  }), getLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    numberProps: numberProps,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineProps = _ref3.lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = (typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps) || {};\n  properties.className = properties.className ? className.concat(properties.className) : className;\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction wrapLinesInSpan(codeTree, lineProps) {\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = newTree.length + 1;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        };\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          newTree.push(createLineElement({\n            children: _children,\n            lineNumber: lineNumber,\n            lineProps: lineProps\n          }));\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            newTree.push(createLineElement({\n              children: [newChild],\n              lineNumber: lineNumber,\n              lineProps: lineProps,\n              className: node.properties.className\n            }));\n          }\n        } else {\n          newTree.push(createLineElement({\n            children: [newChild],\n            lineNumber: lineNumber,\n            lineProps: lineProps,\n            className: node.properties.className\n          }));\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      newTree.push(createLineElement({\n        children: children,\n        lineNumber: newTree.length + 1,\n        lineProps: lineProps\n      }));\n    }\n  }\n\n  return newTree;\n}\n\nfunction defaultRenderer(_ref4) {\n  var rows = _ref4.rows,\n      stylesheet = _ref4.stylesheet,\n      useInlineStyles = _ref4.useInlineStyles;\n  return rows.map(function (node, i) {\n    return (0, _createElement.default)({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n}\n\nfunction getCodeTree(_ref5) {\n  var astGenerator = _ref5.astGenerator,\n      language = _ref5.language,\n      code = _ref5.code,\n      defaultCodeValue = _ref5.defaultCodeValue;\n\n  if (astGenerator.getLanguage) {\n    var hasLanguage = language && astGenerator.getLanguage(language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  }\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nfunction _default(defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref6) {\n    var language = _ref6.language,\n        children = _ref6.children,\n        _ref6$style = _ref6.style,\n        style = _ref6$style === void 0 ? defaultStyle : _ref6$style,\n        _ref6$customStyle = _ref6.customStyle,\n        customStyle = _ref6$customStyle === void 0 ? {} : _ref6$customStyle,\n        _ref6$codeTagProps = _ref6.codeTagProps,\n        codeTagProps = _ref6$codeTagProps === void 0 ? {\n      style: style['code[class*=\"language-\"]']\n    } : _ref6$codeTagProps,\n        _ref6$useInlineStyles = _ref6.useInlineStyles,\n        useInlineStyles = _ref6$useInlineStyles === void 0 ? true : _ref6$useInlineStyles,\n        _ref6$showLineNumbers = _ref6.showLineNumbers,\n        showLineNumbers = _ref6$showLineNumbers === void 0 ? false : _ref6$showLineNumbers,\n        _ref6$startingLineNum = _ref6.startingLineNumber,\n        startingLineNumber = _ref6$startingLineNum === void 0 ? 1 : _ref6$startingLineNum,\n        lineNumberContainerProps = _ref6.lineNumberContainerProps,\n        lineNumberProps = _ref6.lineNumberProps,\n        wrapLines = _ref6.wrapLines,\n        _ref6$lineProps = _ref6.lineProps,\n        lineProps = _ref6$lineProps === void 0 ? {} : _ref6$lineProps,\n        renderer = _ref6.renderer,\n        _ref6$PreTag = _ref6.PreTag,\n        PreTag = _ref6$PreTag === void 0 ? 'pre' : _ref6$PreTag,\n        _ref6$CodeTag = _ref6.CodeTag,\n        CodeTag = _ref6$CodeTag === void 0 ? 'code' : _ref6$CodeTag,\n        _ref6$code = _ref6.code,\n        code = _ref6$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref6$code,\n        astGenerator = _ref6.astGenerator,\n        rest = (0, _objectWithoutProperties2.default)(_ref6, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"startingLineNumber\", \"lineNumberContainerProps\", \"lineNumberProps\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n    astGenerator = astGenerator || defaultAstGenerator;\n    var lineNumbers = showLineNumbers ? _react.default.createElement(LineNumbers, {\n      containerProps: lineNumberContainerProps,\n      codeStyle: codeTagProps.style || {},\n      numberProps: lineNumberProps,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: 'hljs'\n    });\n\n    if (!astGenerator) {\n      return _react.default.createElement(PreTag, preProps, lineNumbers, _react.default.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    }\n\n    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineProps) : codeTree.value;\n    return _react.default.createElement(PreTag, preProps, lineNumbers, _react.default.createElement(CodeTag, codeTagProps, renderer({\n      rows: tree,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"]},"metadata":{},"sourceType":"script"}