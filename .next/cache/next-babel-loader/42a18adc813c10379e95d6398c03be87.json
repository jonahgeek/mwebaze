{"ast":null,"code":"var _jsxFileName = \"/home/jonathan/Projects/mwebaze/components/CodeBlock.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { anOldHope } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nconst preStyle = {\n  borderRadius: 6,\n  padding: '1.7em',\n  lineHeight: '2.3em'\n};\nconst codeProps = {\n  style: {\n    fontFamily: `ibm-plex-mono, Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New'`,\n    fontSize: '18.5px'\n  }\n};\n\nclass CodeBlock extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"copyToClipboard\", () => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        copiedToClipboard: true\n      }), () => {\n        setTimeout(() => {\n          this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n            copiedToClipboard: false\n          }));\n        }, 3500);\n      });\n    });\n\n    _defineProperty(this, \"toggleCopyButton\", () => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        displayCopyButton: !this.state.displayCopyButton\n      }));\n    });\n\n    this.state = {\n      removeLines: [],\n      addLines: [],\n      updateLines: [],\n      copiedToClipboard: false,\n      displayCopyButton: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      language\n    } = this.props;\n    const linesObj = language && language.split(\":\")[1];\n\n    if (linesObj) {\n      const splittedValues = linesObj.split(',');\n      let stateLabel;\n      let linesToUpdate = {\n        removeLines: [],\n        addLines: [],\n        updateLines: []\n      };\n      splittedValues.map(lines => {\n        const linesRange = lines.split(',');\n        linesRange.map(eachLine => {\n          const splitted = eachLine.split('-');\n\n          if (splitted[0] === '') {\n            // Is removing lines\n            splitted.shift();\n            stateLabel = 'removeLines';\n          } else if (splitted[0] === '!') {\n            splitted.shift();\n            stateLabel = 'updateLines';\n          } else {\n            stateLabel = 'addLines';\n          }\n\n          if (splitted.length > 1) {\n            for (let i = parseInt(splitted[0]); i <= parseInt(splitted[1]); i++) {\n              linesToUpdate[stateLabel].push(i);\n            }\n          } else {\n            // Only one liner\n            linesToUpdate[stateLabel].push(parseInt(splitted[0]));\n          }\n\n          this.setState({\n            [stateLabel]: [...this.state[stateLabel], ...linesToUpdate[stateLabel]]\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      language,\n      value\n    } = this.props;\n    const {\n      addLines,\n      removeLines,\n      updateLines,\n      copiedToClipboard,\n      displayCopyButton\n    } = this.state;\n    return __jsx(\"div\", {\n      onMouseEnter: () => this.toggleCopyButton(),\n      onMouseLeave: () => this.toggleCopyButton(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, __jsx(SyntaxHighlighter, {\n      language: language,\n      style: anOldHope,\n      customStyle: preStyle,\n      codeTagProps: codeProps,\n      wrapLines: true,\n      lineProps: lineNumber => {\n        const mergedLines = addLines.concat(removeLines).concat(updateLines);\n        let style = {\n          display: 'block'\n        };\n\n        if (mergedLines.includes(lineNumber)) {\n          style = _objectSpread(_objectSpread({}, style), {}, {\n            margin: '0 -22px',\n            padding: '3px 12px 6px'\n          });\n        }\n\n        if (removeLines.includes(lineNumber)) {\n          style = _objectSpread(_objectSpread({}, style), {}, {\n            borderLeft: `6px #f9320c solid`,\n            background: `rgba(249, 50, 12, .1)`\n          });\n        } else if (addLines.includes(lineNumber)) {\n          style = _objectSpread(_objectSpread({}, style), {}, {\n            borderLeft: `6px #3ac569 solid`,\n            background: `rgba(58, 197, 105, .1)`\n          });\n        } else if (updateLines.includes(lineNumber)) {\n          style = _objectSpread(_objectSpread({}, style), {}, {\n            borderLeft: `6px #f9c00c solid`,\n            background: `rgba(249, 192, 12, .1)`\n          });\n        }\n\n        return {\n          style\n        };\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, value), __jsx(\"div\", {\n      className: \"copy-to-clipboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, __jsx(CopyToClipboard, {\n      text: value,\n      onCopy: () => this.copyToClipboard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, copiedToClipboard ? 'Copied âœ”' : 'Copy'))));\n  }\n\n}\n\nexport default CodeBlock;","map":{"version":3,"sources":["/home/jonathan/Projects/mwebaze/components/CodeBlock.js"],"names":["React","PureComponent","SyntaxHighlighter","anOldHope","CopyToClipboard","preStyle","borderRadius","padding","lineHeight","codeProps","style","fontFamily","fontSize","CodeBlock","constructor","props","setState","state","copiedToClipboard","setTimeout","displayCopyButton","removeLines","addLines","updateLines","componentDidMount","language","linesObj","split","splittedValues","stateLabel","linesToUpdate","map","lines","linesRange","eachLine","splitted","shift","length","i","parseInt","push","render","value","toggleCopyButton","lineNumber","mergedLines","concat","display","includes","margin","borderLeft","background","copyToClipboard"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { anOldHope } from 'react-syntax-highlighter/dist/esm/styles/hljs'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nconst preStyle = {\n  borderRadius: 6,\n  padding: '1.7em',\n  lineHeight: '2.3em',\n}\n\nconst codeProps = {\n  style: {\n    fontFamily: `ibm-plex-mono, Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New'`,\n    fontSize: '18.5px'\n  }\n}\n\nclass CodeBlock extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      removeLines: [],\n      addLines: [],\n      updateLines: [],\n      copiedToClipboard: false,\n      displayCopyButton: false,\n    }\n  }\n\n  copyToClipboard = () => {\n    this.setState({\n      ...this.state,\n      copiedToClipboard: true\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          copiedToClipboard: false\n        })\n      }, 3500)\n    })\n  }\n\n  componentDidMount() {\n    const { language } = this.props;\n    const linesObj = language && language.split(\":\")[1]\n\n    if (linesObj) {\n      const splittedValues = linesObj.split(',')\n      let stateLabel\n      let linesToUpdate = {\n        removeLines: [], addLines: [], updateLines: [],\n      }\n\n      splittedValues.map(lines => {\n        const linesRange = lines.split(',')\n\n        linesRange.map(eachLine => {\n          const splitted = eachLine.split('-')\n\n          if (splitted[0] === '') { // Is removing lines\n            splitted.shift()\n            stateLabel = 'removeLines'\n          } else if (splitted[0] === '!') {\n            splitted.shift()\n            stateLabel = 'updateLines'\n          } else {\n            stateLabel = 'addLines'\n          }\n\n          if (splitted.length > 1) {\n            for (let i = parseInt(splitted[0]); i <= parseInt(splitted[1]); i++) {\n              linesToUpdate[stateLabel].push(i)\n            }\n          } else { // Only one liner\n            linesToUpdate[stateLabel].push(parseInt(splitted[0]))\n          }\n\n          this.setState({\n            [stateLabel]: [\n              ...this.state[stateLabel], ...linesToUpdate[stateLabel]\n            ]\n          })\n        })\n      })\n    }\n  }\n\n  toggleCopyButton = () => {\n    this.setState({ ...this.state, displayCopyButton: !this.state.displayCopyButton })\n  }\n\n  render() {\n    const { language, value } = this.props;\n    const { addLines, removeLines, updateLines, copiedToClipboard, displayCopyButton } = this.state\n\n    return (\n      <div\n        onMouseEnter={() => this.toggleCopyButton()}\n        onMouseLeave={() => this.toggleCopyButton()}\n      >\n        <SyntaxHighlighter\n          language={language}\n          style={anOldHope}\n          customStyle={preStyle}\n          codeTagProps={codeProps}\n          wrapLines\n          lineProps={lineNumber => {\n            const mergedLines = addLines.concat(removeLines).concat(updateLines)\n            let style = { display: 'block' };\n\n            if (mergedLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                margin: '0 -22px',\n                padding: '3px 12px 6px'\n              }\n            }\n\n            if (removeLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #f9320c solid`,\n                background: `rgba(249, 50, 12, .1)`\n              }\n            } else if (addLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #3ac569 solid`,\n                background: `rgba(58, 197, 105, .1)`\n              }\n            } else if (updateLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #f9c00c solid`,\n                background: `rgba(249, 192, 12, .1)`\n              }\n            }\n\n            return { style };\n          }}\n        >\n          {value}\n        </SyntaxHighlighter>\n\n        <div className=\"copy-to-clipboard\">\n          <CopyToClipboard text={value} onCopy={() => this.copyToClipboard()}>\n            <button>\n              {copiedToClipboard ? 'Copied âœ”' : 'Copy'}\n            </button>\n          </CopyToClipboard>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CodeBlock\n"]},"metadata":{},"sourceType":"module"}