{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jonathan/Projects/mwebaze/components/CodeBlock.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { anOldHope } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nvar preStyle = {\n  borderRadius: 6,\n  padding: '1.7em',\n  lineHeight: '2.3em'\n};\nvar codeProps = {\n  style: {\n    fontFamily: \"ibm-plex-mono, Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New'\",\n    fontSize: '18.5px'\n  }\n};\n\nvar CodeBlock = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CodeBlock, _PureComponent);\n\n  var _super = _createSuper(CodeBlock);\n\n  function CodeBlock(props) {\n    var _this;\n\n    _classCallCheck(this, CodeBlock);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"copyToClipboard\", function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        copiedToClipboard: true\n      }), function () {\n        setTimeout(function () {\n          _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n            copiedToClipboard: false\n          }));\n        }, 3500);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleCopyButton\", function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        displayCopyButton: !_this.state.displayCopyButton\n      }));\n    });\n\n    _this.state = {\n      removeLines: [],\n      addLines: [],\n      updateLines: [],\n      copiedToClipboard: false,\n      displayCopyButton: false\n    };\n    return _this;\n  }\n\n  _createClass(CodeBlock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var language = this.props.language;\n      var linesObj = language && language.split(\":\")[1];\n\n      if (linesObj) {\n        var splittedValues = linesObj.split(',');\n        var stateLabel;\n        var linesToUpdate = {\n          removeLines: [],\n          addLines: [],\n          updateLines: []\n        };\n        splittedValues.map(function (lines) {\n          var linesRange = lines.split(',');\n          linesRange.map(function (eachLine) {\n            var splitted = eachLine.split('-');\n\n            if (splitted[0] === '') {\n              // Is removing lines\n              splitted.shift();\n              stateLabel = 'removeLines';\n            } else if (splitted[0] === '!') {\n              splitted.shift();\n              stateLabel = 'updateLines';\n            } else {\n              stateLabel = 'addLines';\n            }\n\n            if (splitted.length > 1) {\n              for (var i = parseInt(splitted[0]); i <= parseInt(splitted[1]); i++) {\n                linesToUpdate[stateLabel].push(i);\n              }\n            } else {\n              // Only one liner\n              linesToUpdate[stateLabel].push(parseInt(splitted[0]));\n            }\n\n            _this2.setState(_defineProperty({}, stateLabel, [].concat(_toConsumableArray(_this2.state[stateLabel]), _toConsumableArray(linesToUpdate[stateLabel]))));\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          language = _this$props.language,\n          value = _this$props.value;\n      var _this$state = this.state,\n          addLines = _this$state.addLines,\n          removeLines = _this$state.removeLines,\n          updateLines = _this$state.updateLines,\n          copiedToClipboard = _this$state.copiedToClipboard,\n          displayCopyButton = _this$state.displayCopyButton;\n      return __jsx(\"div\", {\n        onMouseEnter: function onMouseEnter() {\n          return _this3.toggleCopyButton();\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this3.toggleCopyButton();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, __jsx(SyntaxHighlighter, {\n        language: language,\n        style: anOldHope,\n        customStyle: preStyle,\n        codeTagProps: codeProps,\n        wrapLines: true,\n        lineProps: function lineProps(lineNumber) {\n          var mergedLines = addLines.concat(removeLines).concat(updateLines);\n          var style = {\n            display: 'block'\n          };\n\n          if (mergedLines.includes(lineNumber)) {\n            style = _objectSpread(_objectSpread({}, style), {}, {\n              margin: '0 -22px',\n              padding: '3px 12px 6px'\n            });\n          }\n\n          if (removeLines.includes(lineNumber)) {\n            style = _objectSpread(_objectSpread({}, style), {}, {\n              borderLeft: \"6px #f9320c solid\",\n              background: \"rgba(249, 50, 12, .1)\"\n            });\n          } else if (addLines.includes(lineNumber)) {\n            style = _objectSpread(_objectSpread({}, style), {}, {\n              borderLeft: \"6px #3ac569 solid\",\n              background: \"rgba(58, 197, 105, .1)\"\n            });\n          } else if (updateLines.includes(lineNumber)) {\n            style = _objectSpread(_objectSpread({}, style), {}, {\n              borderLeft: \"6px #f9c00c solid\",\n              background: \"rgba(249, 192, 12, .1)\"\n            });\n          }\n\n          return {\n            style: style\n          };\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, value), __jsx(\"div\", {\n        className: \"copy-to-clipboard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, __jsx(CopyToClipboard, {\n        text: value,\n        onCopy: function onCopy() {\n          return _this3.copyToClipboard();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }, __jsx(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, copiedToClipboard ? 'Copied âœ”' : 'Copy'))));\n    }\n  }]);\n\n  return CodeBlock;\n}(PureComponent);\n\nexport default CodeBlock;","map":{"version":3,"sources":["/home/jonathan/Projects/mwebaze/components/CodeBlock.js"],"names":["React","PureComponent","SyntaxHighlighter","anOldHope","CopyToClipboard","preStyle","borderRadius","padding","lineHeight","codeProps","style","fontFamily","fontSize","CodeBlock","props","setState","state","copiedToClipboard","setTimeout","displayCopyButton","removeLines","addLines","updateLines","language","linesObj","split","splittedValues","stateLabel","linesToUpdate","map","lines","linesRange","eachLine","splitted","shift","length","i","parseInt","push","value","toggleCopyButton","lineNumber","mergedLines","concat","display","includes","margin","borderLeft","background","copyToClipboard"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { anOldHope } from 'react-syntax-highlighter/dist/esm/styles/hljs'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nconst preStyle = {\n  borderRadius: 6,\n  padding: '1.7em',\n  lineHeight: '2.3em',\n}\n\nconst codeProps = {\n  style: {\n    fontFamily: `ibm-plex-mono, Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New'`,\n    fontSize: '18.5px'\n  }\n}\n\nclass CodeBlock extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      removeLines: [],\n      addLines: [],\n      updateLines: [],\n      copiedToClipboard: false,\n      displayCopyButton: false,\n    }\n  }\n\n  copyToClipboard = () => {\n    this.setState({\n      ...this.state,\n      copiedToClipboard: true\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          copiedToClipboard: false\n        })\n      }, 3500)\n    })\n  }\n\n  componentDidMount() {\n    const { language } = this.props;\n    const linesObj = language && language.split(\":\")[1]\n\n    if (linesObj) {\n      const splittedValues = linesObj.split(',')\n      let stateLabel\n      let linesToUpdate = {\n        removeLines: [], addLines: [], updateLines: [],\n      }\n\n      splittedValues.map(lines => {\n        const linesRange = lines.split(',')\n\n        linesRange.map(eachLine => {\n          const splitted = eachLine.split('-')\n\n          if (splitted[0] === '') { // Is removing lines\n            splitted.shift()\n            stateLabel = 'removeLines'\n          } else if (splitted[0] === '!') {\n            splitted.shift()\n            stateLabel = 'updateLines'\n          } else {\n            stateLabel = 'addLines'\n          }\n\n          if (splitted.length > 1) {\n            for (let i = parseInt(splitted[0]); i <= parseInt(splitted[1]); i++) {\n              linesToUpdate[stateLabel].push(i)\n            }\n          } else { // Only one liner\n            linesToUpdate[stateLabel].push(parseInt(splitted[0]))\n          }\n\n          this.setState({\n            [stateLabel]: [\n              ...this.state[stateLabel], ...linesToUpdate[stateLabel]\n            ]\n          })\n        })\n      })\n    }\n  }\n\n  toggleCopyButton = () => {\n    this.setState({ ...this.state, displayCopyButton: !this.state.displayCopyButton })\n  }\n\n  render() {\n    const { language, value } = this.props;\n    const { addLines, removeLines, updateLines, copiedToClipboard, displayCopyButton } = this.state\n\n    return (\n      <div\n        onMouseEnter={() => this.toggleCopyButton()}\n        onMouseLeave={() => this.toggleCopyButton()}\n      >\n        <SyntaxHighlighter\n          language={language}\n          style={anOldHope}\n          customStyle={preStyle}\n          codeTagProps={codeProps}\n          wrapLines\n          lineProps={lineNumber => {\n            const mergedLines = addLines.concat(removeLines).concat(updateLines)\n            let style = { display: 'block' };\n\n            if (mergedLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                margin: '0 -22px',\n                padding: '3px 12px 6px'\n              }\n            }\n\n            if (removeLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #f9320c solid`,\n                background: `rgba(249, 50, 12, .1)`\n              }\n            } else if (addLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #3ac569 solid`,\n                background: `rgba(58, 197, 105, .1)`\n              }\n            } else if (updateLines.includes(lineNumber)) {\n              style = {\n                ...style,\n                borderLeft: `6px #f9c00c solid`,\n                background: `rgba(249, 192, 12, .1)`\n              }\n            }\n\n            return { style };\n          }}\n        >\n          {value}\n        </SyntaxHighlighter>\n\n        <div className=\"copy-to-clipboard\">\n          <CopyToClipboard text={value} onCopy={() => this.copyToClipboard()}>\n            <button>\n              {copiedToClipboard ? 'Copied âœ”' : 'Copy'}\n            </button>\n          </CopyToClipboard>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CodeBlock\n"]},"metadata":{},"sourceType":"module"}